{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","config/constants/contracts.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isPool","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","honyPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmFromSymbol","lpSymbol","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","bnbPriceUSD","useTotalValue","totalFarmsValue","useFarmsValue","sum","bnbPrice","honyPrice","value","i","length","val","BNB","CAKE","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","cake","97","56","syrup","masterChef","sousChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","real_cake","hony","bake","ada","ust","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","pools","sousId","tokenName","stakingTokenName","HONY","stakingTokenAddress","contractAddress","poolCategory","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","nonBnbPools","poolsConfig","filter","p","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendinghony","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","contracts","imageName","depositFee","depositLink","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","projectId","parseInt","REACT_APP_CROWDIN_PROJECTID","stringTranslationsApi","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","LanguageContextProvider","storedLangCode","localStorage","getItem","storedLang","getStoredLang","listLanguageTranslations","undefined","fetchTranslationsForSelectedLanguage","then","translationApiResponse","catch","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","Wrapper","PageLoader","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","to","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"mTA8HeA,EApHC,uCAAG,4BAAAC,EAAA,sEACEC,QAAQC,IACzBC,IAAYC,IAAZ,uCAAgB,WAAOC,GAAP,yDAAAL,EAAA,6DACRM,EAAWD,EAAWE,YAAYC,IAClCC,EAAQ,CAEZ,CACEC,QAASL,EAAWM,eAAeH,IACnCI,KAAM,YACNC,OAAQ,CAACP,IAGX,CACEI,QAASL,EAAWS,mBAAmBN,IACvCI,KAAM,YACNC,OAAQ,CAACP,IAGX,CACEI,QAASL,EAAWU,OAASV,EAAWM,eAAeH,IAAYF,EACnEM,KAAM,YACNC,OAAQ,CAACG,gBAGX,CACEN,QAASJ,EACTM,KAAM,eAGR,CACEF,QAASL,EAAWM,eAAeH,IACnCI,KAAM,YAGR,CACEF,QAASL,EAAWS,mBAAmBN,IACvCI,KAAM,aAlCI,SA6CJK,YAAUC,EAAOT,GA7Cb,0CAuCZU,EAvCY,KAwCZC,EAxCY,KAyCZC,EAzCY,KA0CZC,EA1CY,KA2CZC,EA3CY,KA4CZC,EA5CY,MAkDW,IAAtBnB,EAAWU,QACZU,EAAc,IAAIC,IAAUL,GAAkBM,IAAI,IAAID,IAAU,IAAIE,IAAI,KAEtEC,EADCxB,EAAWyB,cAAgBC,IAAWC,MAAQ3B,EAAW4B,mBAAqBF,IAAWC,KACtE,IAAIN,IAAU,GAEd,IAAIA,IAAUN,GAAoBO,IAAI,IAAID,IAAUP,IAE1Ee,EAAsBT,EAAYU,MAAMN,KAGlCO,EAAe,IAAIV,IAAUL,GAAkBM,IAAI,IAAID,IAAUJ,IAGvEY,EAAsB,IAAIR,IAAUN,GACjCO,IAAI,IAAID,IAAU,IAAIE,IAAI,KAC1BO,MAAM,IAAIT,IAAU,IACpBS,MAAMC,GAGTX,EAAc,IAAIC,IAAUP,GAAgBQ,IAAI,IAAID,IAAU,IAAIE,IAAIL,IAAgBY,MAAMC,GACtFC,EAAmB,IAAIX,IAAUN,GACpCO,IAAI,IAAID,IAAU,IAAIE,IAAIJ,IAC1BW,MAAMC,GAGPP,EADCJ,EAAYa,WAAW,GAAK,EACTD,EAAiBV,IAAIF,GAErB,IAAIC,IAAUN,GAAoBO,IAAI,IAAID,IAAUP,KA7E9D,UAiFsCF,YAAUsB,EAAe,CAC3E,CACE7B,QAASM,cACTJ,KAAM,WACNC,OAAQ,CAACR,EAAWmC,MAEtB,CACE9B,QAASM,cACTJ,KAAM,mBAER,CACEF,QAASM,cACTJ,KAAM,kBA7FI,2CAiFP6B,EAjFO,KAiFDC,EAjFC,KAiFgBC,EAjFhB,KAiGRC,EAAa,IAAIlB,IAAUe,EAAKG,WAAWC,MAC3CC,EAAaF,EAAWjB,IAAI,IAAID,IAAUgB,IAlGlC,6CAqGTrC,GArGS,IAsGZoB,YAAaA,EAAYsB,SACzBb,oBAAqBA,EAAoBa,SACzClB,kBAAmBA,EAAkBkB,SACrCD,WAAYA,EAAWE,WACvBC,WAAW,GAAD,OAAKL,EAAWjB,IAAI,KAAKuB,WAAzB,KACVP,aAAc,IAAIjB,IAAUiB,GAAcK,cA3G9B,4CAAhB,wDAFe,cACXG,EADW,yBAiHVA,GAjHU,2CAAH,qDCDHC,EAAuB,uCAAG,WAAOC,GAAP,qBAAArD,EAAA,6DAC/BsD,EAAmBtC,cAEnBP,EAAQN,IAAYC,KAAI,SAACmD,GAE7B,MAAO,CAAE7C,QADiB6C,EAAKxC,OAASwC,EAAK5C,eAAeH,IAAY+C,EAAKhD,YAAYC,IACpDI,KAAM,YAAaC,OAAQ,CAACwC,EAASC,OALvC,SAQPrC,YAAUuC,EAAU/C,GARb,cAQ/BgD,EAR+B,OAS/BC,EAAqBD,EAAgBrD,KAAI,SAACuD,GAC9C,OAAO,IAAIjC,IAAUiC,GAAWZ,YAVG,kBAY9BW,GAZ8B,2CAAH,sDAevBE,EAA0B,uCAAG,WAAOP,GAAP,mBAAArD,EAAA,6DAClCS,EAAQN,IAAYC,KAAI,SAACmD,GAE7B,MAAO,CACL7C,QAFwB6C,EAAKxC,OAASwC,EAAK5C,eAAeH,IAAY+C,EAAKhD,YAAYC,IAGvFI,KAAM,YACNC,OAAQ,CAACwC,OAN2B,SAUTpC,YAAUuC,EAAU/C,GAVX,cAUlCoD,EAVkC,OAWlCC,EAAsBD,EAAiBzD,KAAI,SAAC2D,GAChD,OAAO,IAAIrC,IAAUqC,GAAchB,YAZG,kBAcjCe,GAdiC,2CAAH,sDAiB1BE,EAA2B,uCAAG,WAAOX,GAAP,qBAAArD,EAAA,6DACnCsD,EAAmBtC,cAEnBP,EAAQN,IAAYC,KAAI,SAACmD,GAC7B,MAAO,CACL7C,QAAS4C,EACT1C,KAAM,WACNC,OAAQ,CAAC0C,EAAKf,IAAKa,OAPkB,SAWTpC,YAAUsB,EAAe9B,GAXhB,cAWnCwD,EAXmC,OAYnCC,EAAuBD,EAAkB7D,KAAI,SAAC+D,GAClD,OAAO,IAAIzC,IAAUyC,EAAc,GAAGtB,MAAME,YAbL,kBAelCmB,GAfkC,2CAAH,sDAkB3BE,EAAqB,uCAAG,WAAOf,GAAP,qBAAArD,EAAA,6DAC7BsD,EAAmBtC,cAEnBP,EAAQN,IAAYC,KAAI,SAACmD,GAC7B,MAAO,CACL7C,QAAS4C,EACT1C,KAAM,cACNC,OAAQ,CAAC0C,EAAKf,IAAKa,OAPY,SAWTpC,YAAUsB,EAAe9B,GAXhB,cAW7B4D,EAX6B,OAY7BC,EAAiBD,EAAYjE,KAAI,SAACmE,GACtC,OAAO,IAAI7C,IAAU6C,GAAUxB,YAbE,kBAe5BuB,GAf4B,2CAAH,sDC/C5BE,EAA2B,CAAErB,KAAK,YAAKhD,MAEhCsE,EAAaC,YAAY,CACpC9D,KAAM,QACN4D,eACAG,SAAU,CACRC,mBAAoB,SAACC,EAAOC,GAC1B,IAAMC,EAAwBD,EAAOE,QACrCH,EAAM1B,KAAO0B,EAAM1B,KAAK/C,KAAI,SAACmD,GAC3B,IAAM0B,EAAeF,EAAcG,MAAK,SAACC,GAAD,OAAOA,EAAE3C,MAAQe,EAAKf,OAC9D,OAAO,2BAAKe,GAAS0B,OAGzBG,gBAAiB,SAACP,EAAOC,GACYA,EAAOE,QAAlCK,uBACeC,SAAQ,SAACC,GAAgB,IACtCC,EAAUD,EAAVC,MACRX,EAAM1B,KAAKqC,GAAX,2BAAyBX,EAAM1B,KAAKqC,IAApC,IAA4CC,SAAUF,W,EAOPd,EAAWiB,QAAnDd,E,EAAAA,mBAAoBQ,E,EAAAA,gBAGtBO,EAA4B,yDAAM,WAAOC,GAAP,eAAA5F,EAAA,sEACzBD,IADyB,OACvC8F,EADuC,OAE7CD,EAAShB,EAAmBiB,IAFiB,2CAAN,uDAI5BC,EAAyB,SAACzC,GAAD,8CAAa,WAAOuC,GAAP,uBAAA5F,EAAA,sEAChBoD,EAAwBC,GADR,cAC3C0C,EAD2C,gBAEbnC,EAA2BP,GAFd,cAE3C2C,EAF2C,gBAGhBhC,EAA4BX,GAHZ,cAG3C4C,EAH2C,iBAIlB7B,EAAsBf,GAJJ,QAI3C6C,EAJ2C,OAM3Cb,EAAyBU,EAAmB3F,KAAI,SAAC+F,EAAeX,GACpE,MAAO,CACLA,QACAY,UAAWL,EAAmBP,GAC9BzB,aAAciC,EAAsBR,GACpCrB,cAAe8B,EAAmBT,GAClCjB,SAAU2B,EAAiBV,OAI/BI,EAASR,EAAgB,CAAEC,4BAhBsB,4CAAb,uDAmBvBZ,MAAf,S,iCC9DA,4SAQM4B,EAAO,IAAI3E,IAAU,GAEd4E,EAAqB,WAChC,IAAMV,EAAWW,cACTC,EAAgBC,cAAhBD,YACRE,qBAAU,WACRd,EAASD,iBAER,CAACC,EAAUY,KAKHG,EAAW,WAEtB,OADcC,aAAY,SAAC/B,GAAD,OAAkBA,EAAMgB,MAAM1C,SAI7C0D,EAAiB,SAACrE,GAE7B,OADaoE,aAAY,SAAC/B,GAAD,OAAkBA,EAAMgB,MAAM1C,KAAK+B,MAAK,SAACC,GAAD,OAAOA,EAAE3C,MAAQA,SAIvEsE,EAAoB,SAACC,GAEhC,OADaH,aAAY,SAAC/B,GAAD,OAAkBA,EAAMgB,MAAM1C,KAAK+B,MAAK,SAACC,GAAD,OAAOA,EAAE4B,WAAaA,SAI5EC,EAAc,SAACxE,GAC1B,IAAMe,EAAOsD,EAAerE,GAE5B,MAAO,CACL4D,UAAW7C,EAAKkC,SAAW,IAAI/D,IAAU6B,EAAKkC,SAASW,WAAa,IAAI1E,IAAU,GAClFqC,aAAcR,EAAKkC,SAAW,IAAI/D,IAAU6B,EAAKkC,SAAS1B,cAAgB,IAAIrC,IAAU,GACxFyC,cAAeZ,EAAKkC,SAAW,IAAI/D,IAAU6B,EAAKkC,SAAStB,eAAiB,IAAIzC,IAAU,GAC1F6C,SAAUhB,EAAKkC,SAAW,IAAI/D,IAAU6B,EAAKkC,SAASlB,UAAY,IAAI7C,IAAU,KA0BvEuF,EAAkB,WAC7B,IACM1D,EAAOsD,EADD,IAEZ,OAAOtD,EAAK1B,kBAAoB,IAAIH,IAAU,GAAGC,IAAI4B,EAAK1B,mBAAqBwE,GAGpEa,EAAmB,WAC9B,IACMC,EAAcF,IACd1D,EAAOsD,EAFD,GAGZ,OAAOtD,EAAK1B,kBAAoBsF,EAAYhF,MAAMoB,EAAK1B,mBAAqBwE,GAWjEe,EAAgB,WACf,IAAI1F,IAAU,GAA1B,IACM2F,EAAkBC,IAExB,OADQ5F,IAAU6F,IAAIF,EAAiB,IAI5BC,EAAgB,WAK3B,IAJA,IAAMzB,EAAQc,IACRa,EAAWP,IACXQ,EAAYP,IACdQ,EAAQ,IAAIhG,IAAU,GACjBiG,EAAI,EAAGA,EAAI9B,EAAM+B,OAAQD,IAAK,CACrC,IAAMpE,EAAOsC,EAAM8B,GACnB,GAAIpE,EAAKrB,oBAAqB,CAC5B,IAAI2F,OAAG,EAELA,EADEtE,EAAKtB,mBAAqBF,IAAW+F,IACjCN,EAASrF,MAAMoB,EAAKrB,qBACjBqB,EAAKtB,mBAAqBF,IAAWgG,KAExCN,EAAUtF,MAAMoB,EAAKrB,qBAErBqB,EAAKrB,oBAEbwF,EAAQA,EAAMM,KAAKH,IAIvB,OAAOH,I,iCCtHT,sBAGMO,EAAQ,CAACC,oCAA8BA,mCAA8BA,oCAO5DC,IALI,WACjB,IAAMC,EAAcC,IAAO,EAAGJ,EAAML,OAAS,GAC7C,OAAOK,EAAMG,K,wJCFTE,E,OAAiBC,EAAMC,cAAc,CAAEC,KAAM,EAAGC,KAAM,IAGtDC,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACvBC,mBAAS,GADc,mBACxCJ,EADwC,KAClCK,EADkC,OAEvBD,mBAAS,GAFc,mBAExCH,EAFwC,KAElCK,EAFkC,KAkB/C,OAdArC,qBAAU,WACR,IAAMsC,EAAWC,YAAW,sBAAC,sBAAAjJ,EAAA,sDAC3B+I,GAAQ,SAACG,GAAD,OAAUA,EAAO,KADE,2CAXX,KAclB,OAAO,kBAAMC,cAAcH,MAC1B,IAEHtC,qBAAU,WACR,IAAMsC,EAAWC,YAAW,sBAAC,sBAAAjJ,EAAA,sDAC3B8I,GAAQ,SAACI,GAAD,OAAUA,EAAO,KADE,2CAjBX,KAoBlB,OAAO,kBAAMC,cAAcH,MAC1B,IAEI,cAACV,EAAec,SAAhB,CAAyB1B,MAAO,CAAEe,OAAMC,QAAxC,SAAiDE,M,iCC1B1D,sR,iCCAA,oBAQenC,IALI,WAAO,IAAD,EACA4C,qBAAWf,KAClC,MAAO,CAAEgB,YAFc,EACfZ,KACoBlC,YAFL,EACTiC,Q,iCCJhB,6CAOMc,EAA4C,CAChDC,aAAc,GACdC,gBAAiB,cAGNC,EAAsBlB,wBAAce,I,+SCVjD,IAaeI,EAbGC,IAAOjI,IAAV,KAOX,qBAAGkI,MAAkBC,aAAaC,M,+RCNtC,IAAMC,EAAOJ,YAAOD,EAAPC,CAAH,KAKN,qBAAGC,MAAkBC,aAAaC,MAKlC,qBAAGF,MAAkBC,aAAaG,MAMvBD,O,gCCER,IAAKjI,EAaAmI,EAbZ,oE,SAAYnI,K,UAAAA,E,YAAAA,E,cAAAA,E,YAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,UAAAA,E,YAAAA,E,kBAAAA,M,cAaAmI,K,sBAAAA,E,YAAAA,E,mBAAAA,M,q/UClCG,KACbC,KAAM,CACJC,GAAI,GACJC,GAAI,8CAENC,MAAO,CACLF,GAAI,GACJC,GAAI,8CAENE,WAAY,CACVH,GAAI,GACJC,GAAI,8CAENG,SAAU,CACRJ,GAAI,GACJC,GAAI,8CAENI,KAAM,CACJL,GAAI,GACJC,GAAI,8CAENK,QAAS,CACPN,GAAI,GACJC,GAAI,8CAENM,WAAY,CACVP,GAAI,GACJC,GAAI,8CAENO,WAAY,CACVP,GAAI,6CACJD,GAAI,8CAENS,KAAM,CACJR,GAAI,6CACJD,GAAI,IAENU,UAAW,CACTT,GAAI,6CACJD,GAAI,IAENW,KAAM,CACJV,GAAI,6CACJD,GAAI,IAENY,KAAM,CACJX,GAAI,6CACJD,GAAI,IAENa,IAAK,CACHZ,GAAI,6CACJD,GAAI,IAENc,IAAK,CACHb,GAAI,6CACJD,GAAI,M,8FC3CFnJ,EAAS,uCAAG,WAAOkK,EAAY1K,GAAnB,2BAAAT,EAAA,6DACVoL,EAAOC,cACPC,EAAQ,IAAIF,EAAKG,IAAIC,SAAUC,EAAqCC,eACpEC,EAAM,IAAIC,IAAUT,GAEpBU,EAAWpL,EAAML,KAAI,SAAC0L,GAAD,MAAU,CAACA,EAAKpL,QAAQqL,cAAeJ,EAAIK,mBAAmBF,EAAKlL,KAAMkL,EAAKjL,YALzF,SAMayK,EAAMW,QAAQC,UAAUL,GAAUC,OAN/C,uBAMRK,EANQ,EAMRA,WACFC,EAAMD,EAAW/L,KAAI,SAAC0L,EAAMnE,GAAP,OAAagE,EAAIU,qBAAqB5L,EAAMkH,GAAG/G,KAAMkL,MAPhE,kBASTM,GATS,4CAAH,wDAYAnL,O,gCCxBf,wNAIaqL,EAAiB,WAC5B,OAAOC,IAAUpC,KAAKqC,KAKXxL,EAAuB,WAClC,OAAOuL,IAAUhC,WAAWiC,KAEjBd,EAAsB,WACjC,OAAOa,IAAU3B,WAAW4B,KAEjBC,EAAiB,WAC5B,OAAOF,IAAU9B,KAAK+B,KAEXE,EAAoB,WAC/B,OAAOH,IAAU7B,QAAQ8B,KAEdG,EAA0B,WACrC,OAAOJ,IAAU5B,WAAW6B,M,oSCvB9B,YAEMI,EAAsB,CAC1B,CACEC,OAAQ,EACRC,UAAW,OACXC,iBAAkBhL,IAAWiL,KAC7BC,oBAAqB,6CACrBC,gBAAiB,CACf9C,GAAI,6CACJC,GAAI,8CAEN8C,aAAcjD,IAAakD,KAC3BC,YAAa,8BACbC,SAAS,EACTC,cAAe,IACfC,UAAW,EACXC,YAAY,EACZlM,cAAe,KAIJqL,O,+nBCPTc,EAAcC,IAAYC,QAAO,SAACC,GAAD,OAAOA,EAAEd,mBAAqBhL,IAAW+F,OAC1EgG,EAAWH,IAAYC,QAAO,SAACC,GAAD,OAAOA,EAAEd,mBAAqBhL,IAAW+F,OACvEiG,EAAiBJ,IAAYC,QAAO,SAACC,GAAD,OAAoB,IAAbA,EAAEhB,UAC7CzB,EAAOC,cACP2C,EAAqB,IAAI5C,EAAKG,IAAIC,SAAUyC,EAAsCjN,eAE3EkN,EAAmB,uCAAG,WAAO7K,GAAP,iBAAArD,EAAA,6DAC3BS,EAAQiN,EAAYtN,KAAI,SAACyN,GAAD,MAAQ,CACpCnN,QAASmN,EAAEZ,oBACXrM,KAAM,YACNC,OAAQ,CAACwC,EAASwK,EAAEX,gBAAgB1M,SAJL,SAORS,YAAUuC,EAAU/C,GAPZ,cAO3B0N,EAP2B,yBAQ1BT,EAAYU,QACjB,SAACC,EAAKC,EAAM9I,GAAZ,mBAAC,eAA2B6I,GAA5B,kBAAkCC,EAAKzB,OAAS,IAAInL,IAAUyM,EAAW3I,IAAQzC,aACjF,KAV+B,2CAAH,sDAcnBwL,EAAiB,uCAAG,WAAOlL,GAAP,uBAAArD,EAAA,6DAEzBS,EAAQiN,EAAYtN,KAAI,SAACyN,GAAD,MAAQ,CACpCnN,QAASmN,EAAEZ,oBACXrM,KAAM,YACNC,OAAQ,CAACwC,OALoB,SAOApC,YAAUuC,EAAU/C,GAPpB,cAOzB+N,EAPyB,OAQzBC,EAAgBf,EAAYU,QAChC,SAACC,EAAKC,EAAM9I,GAAZ,mBAAC,eAA2B6I,GAA5B,kBAAkCC,EAAKzB,OAAS,IAAInL,IAAU8M,EAAiBhJ,IAAQzC,aACvF,IAV6B,SAcNqI,EAAKG,IAAImD,WAAWrL,GAdd,cAczBsL,EAdyB,OAezBC,EAAcd,EAASM,QAC3B,SAACC,EAAKC,GAAN,mBAAC,eAAoBD,GAArB,kBAA2BC,EAAKzB,OAAS,IAAInL,IAAUiN,GAAY5L,aACnE,IAjB6B,6CAoBnB0L,GAAkBG,IApBC,4CAAH,sDAuBjBC,EAAsB,uCAAG,WAAOxL,GAAP,uBAAArD,EAAA,6DAC9BS,EAAQsN,EAAe3N,KAAI,SAACyN,GAAD,MAAQ,CACvCnN,QAASmN,EAAEX,gBAAgB1M,IAC3BI,KAAM,WACNC,OAAQ,CAACwC,OAJyB,SAMbpC,YAAU6N,EAAarO,GANV,cAM9BsO,EAN8B,OAO9BC,EAAiBjB,EAAeK,QACpC,SAACC,EAAKC,EAAM9I,GAAZ,mBAAC,eACI6I,GADL,kBAEGC,EAAKzB,OAAS,IAAInL,IAAUqN,EAASvJ,GAAOyJ,OAAOpM,MAAME,aAE5D,IAZkC,SAgBOiL,EAAmB/B,QAAQ8C,SAAS,IAAK1L,GAASyI,OAhBzD,uBAgBpBoD,EAhBoB,EAgB5BD,OAhB4B,6CAkBxBD,GAlBwB,IAkBRG,EAAG,IAAIzN,IAAUwN,GAAkBnM,YAlB3B,4CAAH,sDAqBtBqM,EAAuB,uCAAG,WAAO/L,GAAP,qBAAArD,EAAA,6DAC/BS,EAAQsN,EAAe3N,KAAI,SAACyN,GAAD,MAAQ,CACvCnN,QAASmN,EAAEX,gBAAgB1M,IAC3BI,KAAM,gBACNC,OAAQ,CAACwC,OAJ0B,SAMnBpC,YAAU6N,EAAarO,GANJ,cAM/B2L,EAN+B,OAO/BiD,EAAiBtB,EAAeK,QACpC,SAACC,EAAKC,EAAM9I,GAAZ,mBAAC,eACI6I,GADL,kBAEGC,EAAKzB,OAAS,IAAInL,IAAU0K,EAAI5G,IAAQzC,aAE3C,IAZmC,SAgBTiL,EAAmB/B,QAAQqD,YAAY,IAAKjM,GAASyI,OAhB5C,cAgB/ByD,EAhB+B,oDAkBzBF,GAlByB,IAkBTF,EAAG,IAAIzN,IAAU6N,GAAexM,YAlBvB,2CAAH,sDCnE9ByB,EAA2B,CAAErB,KAAK,YAAKwK,MAEhC6B,EAAa9K,YAAY,CACpC9D,KAAM,QACN4D,eACAG,SAAU,CACR8K,mBAAoB,SAAC5K,EAAOC,GAC1B,IAAM4K,EAAwB5K,EAAOE,QACrCH,EAAM1B,KAAO0B,EAAM1B,KAAK/C,KAAI,SAACkO,GAC3B,IAAMqB,EAAeD,EAAcxK,MAAK,SAAC0K,GAAD,OAAWA,EAAM/C,SAAWyB,EAAKzB,UACzE,OAAO,2BAAKyB,GAASqB,OAGzBE,iBAAkB,SAAChL,EAAOC,GACxB,IAAMW,EAAWX,EAAOE,QACxBH,EAAM1B,KAAO0B,EAAM1B,KAAK/C,KAAI,SAACkO,GAC3B,IAAMwB,EAAerK,EAASP,MAAK,SAAC0K,GAAD,OAAWA,EAAM/C,SAAWyB,EAAKzB,UACpE,OAAO,2BAAKyB,GAAZ,IAAkB7I,SAAUqK,QAGhCC,oBAAqB,SAAClL,EAAOC,GAAY,IAAD,EACLA,EAAOE,QAAhCgL,EAD8B,EAC9BA,MAAOtI,EADuB,EACvBA,MAAOmF,EADgB,EAChBA,OAChBrH,EAAQX,EAAM1B,KAAK8M,WAAU,SAACpC,GAAD,OAAOA,EAAEhB,SAAWA,KACvDhI,EAAM1B,KAAKqC,GAAX,2BAAyBX,EAAM1B,KAAKqC,IAApC,IAA4CC,SAAS,2BAAMZ,EAAM1B,KAAKqC,GAAOC,UAAzB,kBAAoCuK,EAAQtI,U,EAMzB8H,EAAW9J,QAArDmK,G,EAApBJ,mB,EAAoBI,kBAAkBE,E,EAAAA,oBAmBxCG,EAA0B,SAAC7M,GAAD,8CAAa,WAAOuC,GAAP,uBAAA5F,EAAA,sEACzBkO,EAAoB7K,GADK,cAC5C8K,EAD4C,gBAEfI,EAAkBlL,GAFH,cAE5C8M,EAF4C,gBAGrBtB,EAAuBxL,GAHF,cAG5C2L,EAH4C,iBAIrBI,EAAwB/L,GAJH,QAI5CgM,EAJ4C,OAM5C5J,EAAWkI,IAAYvN,KAAI,SAACkO,GAAD,MAAW,CAC1CzB,OAAQyB,EAAKzB,OACbzG,UAAW+H,EAAWG,EAAKzB,QAC3BuD,oBAAqBD,EAAqB7B,EAAKzB,QAC/C1I,cAAe6K,EAAeV,EAAKzB,QACnC0C,cAAeF,EAAef,EAAKzB,YAGrCjH,EAASiK,EAAiBpK,IAdwB,4CAAb,uDAiB1B4K,EAAsB,SAACxD,EAAgBxJ,GAAjB,8CAAqC,WAAOuC,GAAP,eAAA5F,EAAA,sEAC7CkO,EAAoB7K,GADyB,OAChE8K,EADgE,OAEtEvI,EAASmK,EAAoB,CAAElD,SAAQmD,MAAO,YAAatI,MAAOyG,EAAWtB,MAFP,2CAArC,uDAKtByD,EAAoB,SAACzD,EAAgBxJ,GAAjB,8CAAqC,WAAOuC,GAAP,eAAA5F,EAAA,sEACxCuO,EAAkBlL,GADsB,OAC9DoL,EAD8D,OAEpE7I,EAASmK,EAAoB,CAAElD,SAAQmD,MAAO,sBAAuBtI,MAAO+G,EAAc5B,MAFtB,2CAArC,uDAKpB0D,EAA0B,SAAC1D,EAAgBxJ,GAAjB,8CAAqC,WAAOuC,GAAP,eAAA5F,EAAA,sEAC7C6O,EAAuBxL,GADsB,OACpE2L,EADoE,OAE1EpJ,EAASmK,EAAoB,CAAElD,SAAQmD,MAAO,gBAAiBtI,MAAOsH,EAAenC,MAFX,2CAArC,uDAK1B2D,EAA0B,SAAC3D,EAAgBxJ,GAAjB,8CAAqC,WAAOuC,GAAP,eAAA5F,EAAA,sEAC7CoP,EAAwB/L,GADqB,OACpEgM,EADoE,OAE1EzJ,EAASmK,EAAoB,CAAElD,SAAQmD,MAAO,gBAAiBtI,MAAO2H,EAAexC,MAFX,2CAArC,uDAKxB2C,MAAf,S,gCCjGA,oBAGM3J,EAAsB,CAC1B,CACErD,IAAK,EACLuE,SAAU,gBACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAW+F,IAC7BhH,mBAAoB2P,IAAUhG,KAC9BiG,UAAW,WACXC,WAAY,EACZ5P,QAAQ,GAEV,CACEyB,IAAK,GACLuE,SAAU,gBACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAW+F,IAC7BhH,mBAAoB2P,IAAUhG,KAC9BiG,UAAW,WACXC,WAAY,EACZ5P,QAAQ,GAEV,CACEyB,IAAK,GACLuE,SAAU,gBACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,MACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAWC,KAC7BlB,mBAAoB2P,IAAU5F,KAC9B6F,UAAW,WACXC,WAAY,IACZ5P,QAAQ,GAEV,CACEyB,IAAK,GACLuE,SAAU,iBACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAWC,KAC7BlB,mBAAoB2P,IAAU5F,KAC9B6F,UAAW,YACXC,WAAY,IACZ5P,QAAQ,GAEV,CACEyB,IAAK,GACLuE,SAAU,iBACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAWC,KAC7BlB,mBAAoB2P,IAAU5F,KAC9B6F,UAAW,YACXC,WAAY,EACZ5P,QAAQ,GAEV,CACEyB,IAAK,EACLuE,SAAU,OACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAWiL,KAC7BlM,mBAAoB2P,IAAU1F,KAC9B2F,UAAW,OACXC,WAAY,EACZC,YACE,wGACF7P,QAAQ,GAEV,CACEyB,IAAK,EACLuE,SAAU,OACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAW+F,IAC7BhH,mBAAoB2P,IAAUhG,KAC9BiG,UAAW,OACXC,WAAY,EACZC,YACE,wGACF7P,QAAQ,GAEV,CACEyB,IAAK,EACLuE,SAAU,OACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAW+F,IAC7BhH,mBAAoB2P,IAAUhG,KAC9BiG,UAAW,OACXC,WAAY,EACZC,YACE,wGACF7P,QAAQ,GAEV,CACEyB,IAAK,EACLuE,SAAU,MACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,MACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAW+F,IAC7BhH,mBAAoB2P,IAAUhG,KAC9BiG,UAAW,MACXC,WAAY,EACZC,YACE,wGACF7P,QAAQ,GAEV,CACEyB,IAAK,EACLuE,SAAU,OACVxG,YAAa,CACX6J,GAAI,GACJC,GAAI,8CAENvI,YAAa,OACbnB,eAAgB,CACdyJ,GAAI,GACJC,GAAI,8CAENpI,iBAAkBF,IAAWC,KAC7BlB,mBAAoB2P,IAAU5F,KAC9B6F,UAAW,OACXC,WAAY,EACZC,YACE,wGACF7P,QAAQ,IAIG8E,O,mkFC3Lf,IAcegL,EAdKC,YAAH,KAKO,qBAAGjH,MAAkBkH,OAAOC,c,QCdvCC,EAAK,CAAEC,KAAM,KAAMC,SAAU,WA8B7BC,EAAe,CAC1BH,G,0BC1BII,EAAY,sBAcZC,EAAkB/I,IAAMC,cAAc,CAC1C+I,iBAAkBN,EAClBO,oBAAqB,aACrBC,mBAAoBR,EACpBS,sBAAuB,eAInBC,EAAYC,SAAS1J,yTAAY2J,6BACjCC,EAAwB,IAAIC,qBAAmB,CACnDC,MAAO9J,yTAAY+J,2BAOfC,EAA0B,SAAC,GAAkB,IAAhBtJ,EAAe,EAAfA,SAAe,EACAC,mBAAcoI,GADd,mBACzCM,EADyC,KACvBC,EADuB,OAEI3I,mBAAcoI,GAFlB,mBAEzCQ,EAFyC,KAErBC,EAFqB,OAGR7I,mBAAqB,IAHb,mBAGzCW,EAHyC,KAG3BC,EAH2B,KAWhD/C,qBAAU,WACR,IAAMyL,EAAiBC,aAAaC,QAAQhB,GAC5C,GAAIc,EAAgB,CAClB,IAAMG,EATY,SAACH,GACrB,OAAOf,EAAaxD,QAAO,SAACuD,GAC1B,OAAOA,EAASD,OAASiB,KACxB,GAMkBI,CAAcJ,GACjCX,EAAoBc,QAEpBd,EAAoBP,KAErB,IAEHvK,qBAAU,WACJ6K,GA1BqC,SAACA,GAC5C,OAAOO,EAAsBU,yBAAyBb,EAAWJ,EAAiBL,UAAMuB,EAP3E,EAO8F,KA0BvGC,CAAqCnB,GAClCoB,MAAK,SAACC,GACDA,EAAuBzP,KAAKyE,OAAS,EACvC6B,EAAgB,CAAC,UAEjBA,EAAgBmJ,EAAuBzP,SAG1CwP,MAAK,kBAAMjB,EAAsBH,MACjCsB,OAAM,WACLpJ,EAAgB,CAAC,eAGtB,CAAC8H,EAAkB9H,IAOtB,OACE,cAAC6H,EAAgBlI,SAAjB,CACE1B,MAAO,CAAE6J,mBAAkBC,oBAPF,SAACsB,GAC5BtB,EAAoBsB,GACpBV,aAAaW,QAAQ1B,EAAWyB,EAAW5B,OAK6BO,qBAAoBC,yBAD5F,SAGE,cAAC,IAAoBtI,SAArB,CAA8B1B,MAAO,CAAE8B,eAAcC,mBAArD,SAAyEb,OC/EzEyI,EAAY,UAEZ2B,EAAezK,IAAMC,cAAc,CAAEyK,QAAQ,EAAMC,YAAa,kBAAM,QAEtEC,EAAuB,SAAC,GAAkB,IAAhBvK,EAAe,EAAfA,SAAe,EACjBC,oBAAS,WACnC,IAAMuK,EAAoBhB,aAAaC,QAAQhB,GAC/C,OAAO+B,GAAoBC,KAAKC,MAAMF,MAHK,mBACtCH,EADsC,KAC9BM,EAD8B,KAa7C,OACE,cAACP,EAAa5J,SAAd,CAAuB1B,MAAO,CAAEuL,SAAQC,YARtB,WAClBK,GAAU,SAACC,GAET,OADApB,aAAaW,QAAQ1B,EAAWgC,KAAKI,WAAWD,KACxCA,OAKV,SACE,cAAC,IAAD,CAAiB3J,MAAOoJ,EAASS,IAAOC,IAAxC,SAAgD/K,OCbvCgL,EANE,WAAO,IAAD,EACWvK,qBAAW2J,GAE3C,MAAO,CAAEC,OAHY,EACbA,OAESC,YAHI,EACLA,YAEcrJ,MADhBR,qBAAWwK,OCoFZC,EAxFa,CAC1B,CACEC,MAAO,OACPC,KAAM,WACNC,KAAM,KAER,CACEF,MAAO,QACPC,KAAM,YACNE,MAAO,CACL,CACEH,MAAO,WACPE,KAAM,0FAER,CACEF,MAAO,YACPE,KAAM,+FAIZ,CACEF,MAAO,oBACPC,KAAM,WACNC,KAAM,YAsBR,CACEF,MAAO,aACPC,KAAM,WACNE,MAAO,CACL,CACEH,MAAO,wBACPE,KAAM,0EAER,CACEF,MAAO,mBACPE,KAAM,2EAIZ,CACEF,MAAO,gBACPC,KAAM,UACNC,KAAM,6BAER,CACEF,MAAO,OACPC,KAAM,WACNE,MAAO,CACL,CACEH,MAAO,qBACPE,KAAM,2DAER,CACEF,MAAO,QACPE,KAAM,2CAER,CACEF,MAAO,OACPE,KAAM,wCAER,CACEF,MAAO,SACPE,KAAM,2DCpDCE,EAvBF,SAACC,GAAW,IAAD,EACcC,cAA5BhR,EADc,EACdA,QAASiR,EADK,EACLA,QAASC,EADJ,EACIA,MADJ,EAE4BlL,qBAAWiI,GAArDC,EAFc,EAEdA,iBAAkBC,EAFJ,EAEIA,oBAFJ,EAGUoC,IAAxBX,EAHc,EAGdA,OAAQC,EAHM,EAGNA,YACVsB,EAAetN,cAErB,OACE,cAAC,IAAD,aACE7D,QAASA,EACToR,MAAOH,EACPI,OAAQH,EACRtB,OAAQA,EACRC,YAAaA,EACbyB,YAAapD,GAAoBA,EAAiBL,KAClD0D,MAAOxD,EACPyD,QAASrD,EACTgD,aAAcA,EAAaxR,WAC3B8R,MAAOhB,GACHM,K,sJCtBV,IAAMW,EAAUnL,YAAOI,IAAPJ,CAAH,KAcEoL,EARc,WAC3B,OACE,cAACD,EAAD,UACE,cAAC,IAAD,OCAAE,EAAOC,gBAAK,kBAAM,8DAClBC,EAAQD,gBAAK,kBAAM,uEAGnBE,EAAWF,gBAAK,kBAAM,kCAI5BxT,IAAUoS,OAAO,CACfuB,eAAgB,IAChBC,eAAgB,KAGlB,IAAMC,EAAgB,WAAO,IAAD,EACGlB,cAArBhR,EADkB,EAClBA,QAASiR,EADS,EACTA,QASjB,OARA5N,qBAAU,YACHrD,GAAWmS,OAAOpD,aAAaC,QAAQ,kBAC1CiC,EAAQ,cAET,CAACjR,EAASiR,IAEbhO,cAGE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAACmP,EAAD,IACA,cAAC,EAAD,UACE,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,IAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACE,cAACX,EAAD,MAEF,cAAC,IAAD,CAAOU,KAAK,WAAZ,SACE,cAACR,EAAD,MAeF,cAAC,IAAD,CAAOQ,KAAK,WAAZ,SACE,cAAC,IAAD,CAAUE,GAAG,qBAEf,cAAC,IAAD,CAAOF,KAAK,SAAZ,SACE,cAAC,IAAD,CAAUE,GAAG,qBAGf,cAAC,IAAD,CAAOC,UAAWV,eASf7M,MAAMwN,KAAKR,G,iDC5EpBS,EAAezN,IAAMC,cAAc,GAEnCyN,EAAuB,SAAC,GAAkB,IAAhBrN,EAAe,EAAfA,SACxBsN,EAAgBC,iBAAO,GADgB,EAEnBtN,mBAAS,GAFU,mBAEtCuN,EAFsC,KAE/BC,EAF+B,KAiB7C,OAbA3P,qBAAU,WACR,IAAM0E,EAAOC,cACPrC,EAAWC,YAAW,sBAAC,4BAAAjJ,EAAA,sEACDoL,EAAKG,IAAI+K,iBADR,QACrBC,EADqB,UAEPL,EAAcM,UAChCN,EAAcM,QAAUD,EACxBF,EAASE,IAJgB,2CAM1B,KAEH,OAAO,kBAAMpN,cAAcH,MAC1B,IAEI,cAACgN,EAAa5M,SAAd,CAAuB1B,MAAO0O,EAA9B,SAAsCxN,K,qCClBhC6N,gBAAe,CAC5BC,UAAUxO,EACVyO,QAAS,CACP9Q,MAAO+Q,KACPhK,MAAOiK,QC6BIC,GA1Ba,SAAC,GAAkB,IAAhBlO,EAAe,EAAfA,SACvBmO,EAASC,cAEf,OACE,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,CACEzK,QAASoF,SAAS1J,MAClBgP,WAAY,CACVC,cAAe,CAAEJ,UACjBK,SAJJ,SAOE,cAAC,EAAD,UACE,cAAC9O,EAAA,EAAD,UACE,cAAC,IAAD,UAAgBM,iBCtBhCyO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U,8gNCX1B,mGAMMC,EAAUV,cACVW,EAAe,IAAIC,IAAKC,UAAUC,aAAaJ,EAAS,CAAEK,QAAS,MAKnE1M,EAAU,WAEd,OADa,IAAIuM,IAAKD,IAGlBK,EAAc,SAAC7M,EAAUzK,EAAiBuX,GAE9C,OAAO,IADM5M,IACGE,IAAIC,UAAUL,EAA4BzK,EAASuX,K","file":"static/js/main.14b384da.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from 'config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isPool ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isPool === true){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, honyPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'honyPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        honyPerBlock: new BigNumber(honyPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isPool ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isPool ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendinghony',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { QuoteToken } from 'config/constants/types'\nimport { fetchFarmsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 10 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(1).div(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 0 // HONY-BNB LP\n  const bnbPriceUSD = usePriceBnbBusd()\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n}\n\n/* export const usePriceBnbBusd = (): BigNumber => {\n  return new BigNumber(335.0)\n} */\n/* \nexport const usePriceCakeBusd = (): BigNumber => {\n  return new BigNumber(1.5)\n} */\n\nexport const useTotalValue = (): BigNumber => {\n  let value = new BigNumber(0)\n  const totalFarmsValue = useFarmsValue()\n  value = BigNumber.sum(totalFarmsValue, 0)\n  return value\n}\n\nexport const useFarmsValue = () => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const honyPrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        // TODO: should be updated with quiteToken.MASH\n        val = honyPrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n\n  return value\n}\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'HONY',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'HONY' = 'HONY',\n  'ADA' = 'ADA',\n  'BAKE' = 'BAKE',\n  'REAL_CAKE' = 'CAKE',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token.\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  imageName?: string\n  depositFee?: number\n  depositLink?: string\n  isPool?: boolean\n  honyPerBlock?: number\n  isCommunity?: boolean\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","export default {\n  cake: {\n    97: '',\n    56: '0x727Df3D8b1FE3c0E8D8e6c76F22723C362CdD6d8',\n  },\n  syrup: {\n    97: '',\n    56: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  },\n  masterChef: {\n    97: '',\n    56: '0x7d56f970685D83637a3CD2e03BD1Aefc8b6317B4',\n  },\n  sousChef: {\n    97: '',\n    56: '0x6ab8463a4185b80905e05a9ff80a2d6b714b9e95',\n  },\n  wbnb: {\n    97: '',\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  },\n  lottery: {\n    97: '',\n    56: '0x3C3f2049cc17C136a604bE23cF7E42745edf3b91',\n  },\n  lotteryNFT: {\n    97: '',\n    56: '0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1',\n  },\n  mulltiCall: {\n    56: '0x1Ee38d535d541c55C9dae27B12edf090C608E6Fb',\n    97: '0x641ae38C4504BbD7aDbf6087f512b6DF625356e2',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n  real_cake: {\n    56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\n    97: '',\n  },\n  hony: {\n    56: '0x727Df3D8b1FE3c0E8D8e6c76F22723C362CdD6d8',\n    97: '',\n  },\n  bake: {\n    56: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    97: '',\n  },\n  ada: {\n    56: '0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47',\n    97: '',\n  },\n  ust: {\n    56: '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',\n    97: '',\n  },\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getSyrupAddress = () => {\n  return addresses.syrup[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  {\n    sousId: 0,\n    tokenName: 'HONY',\n    stakingTokenName: QuoteToken.HONY,\n    stakingTokenAddress: '0x117976b2639cDd92c237C8D595BA94755dBB328a',\n    contractAddress: {\n      97: '0xe2C4f8bdE4D5F830bc67f5B40A5573D580E64b83',\n      56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'http://pancakeswap.finance/',\n    harvest: true,\n    tokenPerBlock: '1',\n    sortOrder: 1,\n    isFinished: false,\n    tokenDecimals: 18,\n  },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendinghony('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    lpSymbol: 'HONY - BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0x5d767a303be6C90ed282956019850394e7e4e7F7',\n    },\n    tokenSymbol: 'HONY',\n    tokenAddresses: {\n      97: '',\n      56: '0x727Df3D8b1FE3c0E8D8e6c76F22723C362CdD6d8',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n    imageName: 'hony_bnb',\n    depositFee: 0,\n    isPool: false,\n  },\n  {\n    pid: 10,\n    lpSymbol: 'BNB - BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\n    },\n    tokenSymbol: 'BUSD',\n    tokenAddresses: {\n      97: '',\n      56: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n    imageName: 'bnb_busd',\n    depositFee: 2,\n    isPool: false,\n  },\n  {\n    pid: 11,\n    lpSymbol: 'ETH - BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x7213a321F1855CF1779f42c0CD85d3D95291D34C',\n    },\n    tokenSymbol: 'ETH',\n    tokenAddresses: {\n      97: '',\n      56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    imageName: 'eth_busd',\n    depositFee: 2.5,\n    isPool: false,\n  },\n  {\n    pid: 12,\n    lpSymbol: 'BTCB - BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0xF45cd219aEF8618A92BAa7aD848364a158a24F33',\n    },\n    tokenSymbol: 'BTCB',\n    tokenAddresses: {\n      97: '',\n      56: '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    imageName: 'btcb_busd',\n    depositFee: 2.5,\n    isPool: false,\n  },\n  {\n    pid: 13,\n    lpSymbol: 'USDT - BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x7EFaEf62fDdCCa950418312c6C91Aef321375A00',\n    },\n    tokenSymbol: 'USDT',\n    tokenAddresses: {\n      97: '',\n      56: '0x55d398326f99059fF775485246999027B3197955',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    imageName: 'usdt_busd',\n    depositFee: 3,\n    isPool: false,\n  },\n  {\n    pid: 5,\n    lpSymbol: 'HONY',\n    lpAddresses: {\n      97: '',\n      56: '0x5d767a303be6C90ed282956019850394e7e4e7F7',\n    },\n    tokenSymbol: 'HONY',\n    tokenAddresses: {\n      97: '',\n      56: '0x727Df3D8b1FE3c0E8D8e6c76F22723C362CdD6d8',\n    },\n    quoteTokenSymbol: QuoteToken.HONY,\n    quoteTokenAdresses: contracts.hony,\n    imageName: 'hony',\n    depositFee: 0,\n    depositLink:\n      'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x727df3d8b1fe3c0e8d8e6c76f22723c362cdd6d8',\n    isPool: true,\n  },\n  {\n    pid: 6,\n    lpSymbol: 'CAKE',\n    lpAddresses: {\n      97: '',\n      56: '0x0eD7e52944161450477ee417DE9Cd3a859b14fD0',\n    },\n    tokenSymbol: 'CAKE',\n    tokenAddresses: {\n      97: '',\n      56: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n    imageName: 'cake',\n    depositFee: 2,\n    depositLink:\n      'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\n    isPool: true,\n  },\n  {\n    pid: 7,\n    lpSymbol: 'BAKE',\n    lpAddresses: {\n      97: '',\n      56: '0x3Da30727ed0626b78C212e81B37B97A8eF8A25bB',\n    },\n    tokenSymbol: 'BAKE',\n    tokenAddresses: {\n      97: '',\n      56: '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n    imageName: 'bake',\n    depositFee: 2,\n    depositLink:\n      'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\n    isPool: true,\n  },\n  {\n    pid: 8,\n    lpSymbol: 'ADA',\n    lpAddresses: {\n      97: '',\n      56: '0xBA51D1AB95756ca4eaB8737eCD450cd8F05384cF',\n    },\n    tokenSymbol: 'ADA',\n    tokenAddresses: {\n      97: '',\n      56: '0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n    imageName: 'ada',\n    depositFee: 3,\n    depositLink:\n      'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47',\n    isPool: true,\n  },\n  {\n    pid: 9,\n    lpSymbol: 'BUSD',\n    lpAddresses: {\n      97: '',\n      56: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n    },\n    tokenSymbol: 'BUSD',\n    tokenAddresses: {\n      97: '',\n      56: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n    imageName: 'busd',\n    depositFee: 4,\n    depositLink:\n      'https://exchange.pancakeswap.finance/#/swap?outputCurrency=0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n    isPool: true,\n  },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit/dist/theme'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\n// export const AR = { code: 'ar', language: 'العربية' }\n// export const CA = { code: 'ca', language: 'Català' }\n// export const ZHCN = { code: 'zh-CN', language: '简体中文' }\n// export const ZHTW = { code: 'zh-TW', language: '繁體中文' }\n// export const CS = { code: 'cs', language: 'Čeština' }\n// export const DA = { code: 'da', language: 'Dansk' }\n// export const DE = { code: 'de', language: 'Deutsch' }\n// export const NL = { code: 'nl', language: 'Nederlands' }\n// export const FIL = { code: 'fil', language: 'Filipino' }\n// export const FI = { code: 'fi', language: 'Suomalainen' }\n// export const FR = { code: 'fr', language: 'Français' }\n// export const EL = { code: 'el', language: 'Ελληνικά' }\n// export const HI = { code: 'hi', language: 'हिंदी' }\n// export const HU = { code: 'hu', language: 'Magyar' }\n// export const ID = { code: 'id', language: 'Bahasa Indonesia' }\n// export const IT = { code: 'it', language: 'Italiano' }\n// export const JA = { code: 'ja', language: '日本語' }\n// export const KO = { code: 'ko', language: '한국어' }\n// export const PTBR = { code: 'pt-BR', language: 'Português' }\n// export const RO = { code: 'ro', language: 'Română' }\n// export const RU = { code: 'ru', language: 'Русский' }\n// export const SR = { code: 'sr', language: 'Српски' }\n// export const ESES = { code: 'es-ES', language: 'Español' }\n// export const SVSE = { code: 'sv-SE', language: 'Svenska' }\n// export const TA = { code: 'ta', language: 'தமிழ்' }\n// export const TR = { code: 'tr', language: 'Türkçe' }\n// export const UK = { code: 'uk', language: 'Українська' }\n// export const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch(() => {\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: true, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : true\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n  // return (\n  //     <SCThemeProvider theme={dark}>{children}</SCThemeProvider>\n  // )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://exchange.pancakeswap.finance/#/swap/0x727Df3D8b1FE3c0E8D8e6c76F22723C362CdD6d8',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://exchange.pancakeswap.finance/#/add/BNB/0x727Df3D8b1FE3c0E8D8e6c76F22723C362CdD6d8',\n      },\n    ],\n  },\n  {\n    label: 'Farming & Staking',\n    icon: 'FarmIcon',\n    href: '/farming',\n  },\n  // {\n  //   label: 'Pools',\n  //   icon: 'PoolIcon',\n  //   href: '/pools',\n  // },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  // {\n  //   label: 'IFO',\n  //   icon: 'IfoIcon',\n  //   href: '/ifo',\n  // },\n  {\n    label: 'Token Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'HONY BSCScan Explorer',\n        href: 'https://bscscan.com/address/0x727df3d8b1fe3c0e8d8e6c76f22723c362cdd6d8',\n      },\n      {\n        label: 'HONY Price Chart',\n        href: 'https://poocoin.app/tokens/0x727df3d8b1fe3c0e8d8e6c76f22723c362cdd6d8',\n      },\n    ],\n  },\n  {\n    label: 'Documentation',\n    icon: 'NftIcon',\n    href: 'https://docs.honance.com/',\n  },\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      {\n        label: 'Emission Reduction',\n        href: 'https://docs.honance.com/tokenomics/hony#emission-rates',\n      },\n      {\n        label: 'Audit',\n        href: 'https://docs.honance.com/security/audit',\n      },\n      {\n        label: 'Blog',\n        href: 'https://medium.com/@honeyfinanceteam',\n      },\n      {\n        label: 'GitHub',\n        href: 'https://github.com/thehoneymaker/HoneyFi-Build-front',\n      },\n    ],\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n// import NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n// import Pools from './views/mmPools'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farming\">\n              <Farms />\n            </Route>\n            {/* <Route path=\"/pools\">\n              <Pools />\n            </Route> */}\n            {/* <Route path=\"/lottery\">\n              <Lottery />\n            </Route>\n            <Route path=\"/ifo\">\n              <Ifos />\n            </Route> */}\n            {/* <Route path=\"/nft\">\n              <Nft />\n            </Route> */}\n            {/* Redirect */}\n            <Route path=\"/staking\">\n              <Redirect to=\"/farming/pools\" />\n            </Route>\n            <Route path=\"/syrup\">\n              <Redirect to=\"/farming/pools\" />\n            </Route>\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\nimport bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <UseWalletProvider\n            chainId={parseInt(process.env.REACT_APP_CHAIN_ID)}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}