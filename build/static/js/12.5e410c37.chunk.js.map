{"version":3,"sources":["config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","Wrapper","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","depositLink","isPool","TranslateString","useI18n","liquidityUrlPathParts","depositUrl","React","useMemo","justifyContent","href","external","CoreTag","variant","outline","startIcon","CommunityTag","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","unstake","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFee","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","cakePrice","bnbPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","imageName","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","apy","toNumber","slice","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Text","textSubtle","Hero","Farms","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","fastRefresh","useRefresh","useEffect","activeFarms","filter","activePools","stakedOnlyFarms","userData","stakedOnlyPools","farmsList","farmsToDisplay","cakeRewardPerYear","honyPerBlock","poolWeight","pow","comparedTo","Page","exact","responsive"],"mappings":"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","file":"static/js/12.5e410c37.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(2.5)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 5\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'BNB' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\n\nexport interface TokenAddressesObject {\n  56?: string\n  97?: string\n}\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: TokenAddressesObject\n  quoteTokenSymbol?: string\n  depositLink?: string\n  isPool?: boolean\n  tokenAddresses: TokenAddressesObject\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  depositLink,\n  isPool,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  const depositUrl = React.useMemo(() => {\n    if (depositLink) {\n      return `https://exchange.pancakeswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n    }\n    if (isPool) {\n      return `https://exchange.pancakeswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n    }\n    return `https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`\n  }, [isPool, tokenAddresses, liquidityUrlPathParts, depositLink])\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={depositUrl}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst CoreTag = () => (\n  <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  png {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFee?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFee = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {depositFee > 0 ? (\n        <StyledMaxText>\n          {TranslateString(750, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFee / 100).toString()} {symbol}\n        </StyledMaxText>\n      ) : (\n        <StyledMaxText>{TranslateString(751, 'No fees!')}</StyledMaxText>\n      )}\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFee?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFee }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFee={depositFee}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFee?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFee }) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFee={depositFee} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(999, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  depositFee?: number\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, depositFee }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isPool } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isPool){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isPool])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        depositFee={depositFee}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          HONY\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Stacked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n  border: 1px solid ${({ theme }) => theme.colors.primary} !important;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n  depositFee?: number\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.imageName.toLocaleLowerCase()\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'HONY'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US').slice(0, -1)\n  // const farmAPY = 'Infinite'\n  const depositFee = farm.depositFee ? farm.depositFee : 0\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'HONY' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text fontSize=\"18px\">{TranslateString(736, 'APY')}:</Text>\n          <Text fontSize=\"18px\" bold>\n            {farm.apy ? `${farmAPY} %` : 'Loading ...'}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text fontSize=\"12px\">Deposit Fee:</Text>\n        <Text fontSize=\"12px\" bold>\n          {depositFee} %\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} depositFee={depositFee} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n          depositLink={farm.depositLink}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(752, 'Stacked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(999, 'Farms')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/pools`}>\n          {TranslateString(999, 'Pools')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const activeFarms = farmsLP.filter((farm) => farm.isPool === false && farm.multiplier !== '0X')\n\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n  const activePools = farmsLP.filter((farm) => farm.isPool === true)\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  const stakedOnlyPools = activePools.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.honyPerBlock || 2.5).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Hero>\n        <div>\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\n            {TranslateString(282, \"BEES' Space\")}\n          </Heading>\n          <ul>\n            <li>{TranslateString(580, 'Stake your HONY or your LPs to farm more HONY.')}</li>\n            <li>{TranslateString(404, 'You can unstake at any time you want to.')}</li>\n            <li>{TranslateString(406, 'Rewards are calculated per each block.')}</li>\n            <li>&nbsp;</li>\n            <li>\n              <b>NO deposit fees for HONY-related pools!</b>\n            </li>\n            <li>\n              <i>Small deposit fee for others. More info in the docs.</i>\n            </li>\n          </ul>\n        </div>\n        <img src=\"/images/bees_space_heading.png\" alt=\"BEE Farming artwork\" width={475} height={191} />\n      </Hero>\n      {/* <Heading as=\"h1\" size=\"lg\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(999, 'Stake LP tokens to earn CAKE')}\n      </Heading> */}\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n            {/* {farmsList(activeFarms, false)} */}\n          </Route>\n          <Route exact path={`${path}/pools`}>\n            {stakedOnly ? farmsList(stakedOnlyPools, false) : farmsList(activePools, false)}\n            {/* {farmsList(activePools, false)} */}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/stackem.png\" alt=\"Honey Finance illustration\" width={949} height={384} responsive />\n    </Page>\n  )\n}\n\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`\n\nexport default Farms\n"],"sourceRoot":""}