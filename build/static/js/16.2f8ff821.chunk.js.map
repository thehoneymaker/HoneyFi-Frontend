{"version":3,"sources":["../node_modules/bignumber.js/bignumber.mjs"],"names":["isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","length","r","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","Symbol","toStringTag","for"],"mappings":"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","file":"static/js/16.2f8ff821.chunk.js","sourcesContent":["/*\n *      bignumber.js v9.0.1\n *      A JavaScript library for arbitrary-precision arithmetic.\n *      https://github.com/MikeMcl/bignumber.js\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\n *      MIT Licensed.\n *\n *      BigNumber.prototype methods     |  BigNumber methods\n *                                      |\n *      absoluteValue            abs    |  clone\n *      comparedTo                      |  config               set\n *      decimalPlaces            dp     |      DECIMAL_PLACES\n *      dividedBy                div    |      ROUNDING_MODE\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n *      exponentiatedBy          pow    |      RANGE\n *      integerValue                    |      CRYPTO\n *      isEqualTo                eq     |      MODULO_MODE\n *      isFinite                        |      POW_PRECISION\n *      isGreaterThan            gt     |      FORMAT\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n *      isInteger                       |  isBigNumber\n *      isLessThan               lt     |  maximum              max\n *      isLessThanOrEqualTo      lte    |  minimum              min\n *      isNaN                           |  random\n *      isNegative                      |  sum\n *      isPositive                      |\n *      isZero                          |\n *      minus                           |\n *      modulo                   mod    |\n *      multipliedBy             times  |\n *      negated                         |\n *      plus                            |\n *      precision                sd     |\n *      shiftedBy                       |\n *      squareRoot               sqrt   |\n *      toExponential                   |\n *      toFixed                         |\n *      toFormat                        |\n *      toFraction                      |\n *      toJSON                          |\n *      toNumber                        |\n *      toPrecision                     |\n *      toString                        |\n *      valueOf                         |\n *\n */\n\n\nvar\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n\n  mathceil = Math.ceil,\n  mathfloor = Math.floor,\n\n  bignumberError = '[BigNumber Error] ',\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n  BASE = 1e14,\n  LOG_BASE = 14,\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n  SQRT_BASE = 1e7,\n\n  // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n/*\n * Create and return a BigNumber constructor.\n */\nfunction clone(configObject) {\n  var div, convertBase, parseNumeric,\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n    ONE = new BigNumber(1),\n\n\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,                     // 0 to MAX\n\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,                       // 0 to 8\n\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,                         // 0 to -MAX\n\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,                         // 0 to MAX\n\n    // RANGE : [MIN_EXP, MAX_EXP]\n\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,                          // -1 to -MAX\n\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,                           // 1 to MAX\n\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,                          // true or false\n\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,                         // 0 to 9\n\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,                    // 0 to MAX\n\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      prefix: '',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      groupSeparator: ',',\n      decimalSeparator: '.',\n      fractionGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',      // non-breaking space\n      suffix: ''\n    },\n\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n\n  //------------------------------------------------------------------------------------------\n\n\n  // CONSTRUCTOR\n\n\n  /*\n   * The BigNumber constructor and exported function.\n   * Create and return a new instance of a BigNumber object.\n   *\n   * v {number|string|BigNumber} A numeric value.\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\n   */\n  function BigNumber(v, b) {\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\n      x = this;\n\n    // Enable constructor call without `new`.\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n    if (b == null) {\n\n      if (v && v._isBigNumber === true) {\n        x.s = v.s;\n\n        if (!v.c || v.e > MAX_EXP) {\n          x.c = x.e = null;\n        } else if (v.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        } else {\n          x.e = v.e;\n          x.c = v.c.slice();\n        }\n\n        return;\n      }\n\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\n\n        // Use `1 / n` to handle minus zero also.\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\n\n        // Fast path for integers, where n < 2147483648 (2**31).\n        if (v === ~~v) {\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n          if (e > MAX_EXP) {\n            x.c = x.e = null;\n          } else {\n            x.e = e;\n            x.c = [v];\n          }\n\n          return;\n        }\n\n        str = String(v);\n      } else {\n\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n      }\n\n      // Decimal point?\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n      // Exponential form?\n      if ((i = str.search(/e/i)) > 0) {\n\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n\n        // Integer.\n        e = str.length;\n      }\n\n    } else {\n\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n      intCheck(b, 2, ALPHABET.length, 'Base');\n\n      // Allow exponential notation to be used with base 10 argument, while\n      // also rounding to DECIMAL_PLACES as with other bases.\n      if (b == 10) {\n        x = new BigNumber(v);\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n      }\n\n      str = String(v);\n\n      if (isNum = typeof v == 'number') {\n\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\n\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n          throw Error\n           (tooManyDigits + v);\n        }\n      } else {\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n      }\n\n      alphabet = ALPHABET.slice(0, b);\n      e = i = 0;\n\n      // Check that str is a valid base b number.\n      // Don't use RegExp, so alphabet can contain special characters.\n      for (len = str.length; i < len; i++) {\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n          if (c == '.') {\n\n            // If '.' is not the first character and it has not be found before.\n            if (i > e) {\n              e = len;\n              continue;\n            }\n          } else if (!caseChanged) {\n\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\n              caseChanged = true;\n              i = -1;\n              e = 0;\n              continue;\n            }\n          }\n\n          return parseNumeric(x, String(v), isNum, b);\n        }\n      }\n\n      // Prevent later check for length on converted number.\n      isNum = false;\n      str = convertBase(str, b, 10, x.s);\n\n      // Decimal point?\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n      else e = str.length;\n    }\n\n    // Determine leading zeros.\n    for (i = 0; str.charCodeAt(i) === 48; i++);\n\n    // Determine trailing zeros.\n    for (len = str.length; str.charCodeAt(--len) === 48;);\n\n    if (str = str.slice(i, ++len)) {\n      len -= i;\n\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n      if (isNum && BigNumber.DEBUG &&\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error\n           (tooManyDigits + (x.s * v));\n      }\n\n       // Overflow?\n      if ((e = e - i - 1) > MAX_EXP) {\n\n        // Infinity.\n        x.c = x.e = null;\n\n      // Underflow?\n      } else if (e < MIN_EXP) {\n\n        // Zero.\n        x.c = [x.e = 0];\n      } else {\n        x.e = e;\n        x.c = [];\n\n        // Transform base\n\n        // e is the base 10 exponent.\n        // i is where to slice str to get the first element of the coefficient array.\n        i = (e + 1) % LOG_BASE;\n        if (e < 0) i += LOG_BASE;  // i < 1\n\n        if (i < len) {\n          if (i) x.c.push(+str.slice(0, i));\n\n          for (len -= LOG_BASE; i < len;) {\n            x.c.push(+str.slice(i, i += LOG_BASE));\n          }\n\n          i = LOG_BASE - (str = str.slice(i)).length;\n        } else {\n          i -= len;\n        }\n\n        for (; i--; str += '0');\n        x.c.push(+str);\n      }\n    } else {\n\n      // Zero.\n      x.c = [x.e = 0];\n    }\n  }\n\n\n  // CONSTRUCTOR PROPERTIES\n\n\n  BigNumber.clone = clone;\n\n  BigNumber.ROUND_UP = 0;\n  BigNumber.ROUND_DOWN = 1;\n  BigNumber.ROUND_CEIL = 2;\n  BigNumber.ROUND_FLOOR = 3;\n  BigNumber.ROUND_HALF_UP = 4;\n  BigNumber.ROUND_HALF_DOWN = 5;\n  BigNumber.ROUND_HALF_EVEN = 6;\n  BigNumber.ROUND_HALF_CEIL = 7;\n  BigNumber.ROUND_HALF_FLOOR = 8;\n  BigNumber.EUCLID = 9;\n\n\n  /*\n   * Configure infrequently-changing library-wide settings.\n   *\n   * Accept an object with the following optional properties (if the value of a property is\n   * a number, it must be an integer within the inclusive range stated):\n   *\n   *   DECIMAL_PLACES   {number}           0 to MAX\n   *   ROUNDING_MODE    {number}           0 to 8\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n   *   CRYPTO           {boolean}          true or false\n   *   MODULO_MODE      {number}           0 to 9\n   *   POW_PRECISION       {number}           0 to MAX\n   *   ALPHABET         {string}           A string of two or more unique characters which does\n   *                                     not contain '.'.\n   *   FORMAT           {object}           An object with some of the following properties:\n   *     prefix                 {string}\n   *     groupSize              {number}\n   *     secondaryGroupSize     {number}\n   *     groupSeparator         {string}\n   *     decimalSeparator       {string}\n   *     fractionGroupSize      {number}\n   *     fractionGroupSeparator {string}\n   *     suffix                 {string}\n   *\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\n   *\n   * E.g.\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n   *\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n   *\n   * Return an object with the properties current values.\n   */\n  BigNumber.config = BigNumber.set = function (obj) {\n    var p, v;\n\n    if (obj != null) {\n\n      if (typeof obj == 'object') {\n\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          DECIMAL_PLACES = v;\n        }\n\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 8, p);\n          ROUNDING_MODE = v;\n        }\n\n        // EXPONENTIAL_AT {number|number[]}\n        // Integer, -MAX to MAX inclusive or\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n          v = obj[p];\n          if (v && v.pop) {\n            intCheck(v[0], -MAX, 0, p);\n            intCheck(v[1], 0, MAX, p);\n            TO_EXP_NEG = v[0];\n            TO_EXP_POS = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n          }\n        }\n\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n        if (obj.hasOwnProperty(p = 'RANGE')) {\n          v = obj[p];\n          if (v && v.pop) {\n            intCheck(v[0], -MAX, -1, p);\n            intCheck(v[1], 1, MAX, p);\n            MIN_EXP = v[0];\n            MAX_EXP = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n            if (v) {\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n            } else {\n              throw Error\n               (bignumberError + p + ' cannot be zero: ' + v);\n            }\n          }\n        }\n\n        // CRYPTO {boolean} true or false.\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\n        // '[BigNumber Error] crypto unavailable'\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\n          v = obj[p];\n          if (v === !!v) {\n            if (v) {\n              if (typeof crypto != 'undefined' && crypto &&\n               (crypto.getRandomValues || crypto.randomBytes)) {\n                CRYPTO = v;\n              } else {\n                CRYPTO = !v;\n                throw Error\n                 (bignumberError + 'crypto unavailable');\n              }\n            } else {\n              CRYPTO = v;\n            }\n          } else {\n            throw Error\n             (bignumberError + p + ' not true or false: ' + v);\n          }\n        }\n\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 9, p);\n          MODULO_MODE = v;\n        }\n\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          POW_PRECISION = v;\n        }\n\n        // FORMAT {object}\n        // '[BigNumber Error] FORMAT not an object: {v}'\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\n          v = obj[p];\n          if (typeof v == 'object') FORMAT = v;\n          else throw Error\n           (bignumberError + p + ' not an object: ' + v);\n        }\n\n        // ALPHABET {string}\n        // '[BigNumber Error] ALPHABET invalid: {v}'\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\n          v = obj[p];\n\n          // Disallow if only one character,\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\n          if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n            ALPHABET = v;\n          } else {\n            throw Error\n             (bignumberError + p + ' invalid: ' + v);\n          }\n        }\n\n      } else {\n\n        // '[BigNumber Error] Object expected: {v}'\n        throw Error\n         (bignumberError + 'Object expected: ' + obj);\n      }\n    }\n\n    return {\n      DECIMAL_PLACES: DECIMAL_PLACES,\n      ROUNDING_MODE: ROUNDING_MODE,\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n      RANGE: [MIN_EXP, MAX_EXP],\n      CRYPTO: CRYPTO,\n      MODULO_MODE: MODULO_MODE,\n      POW_PRECISION: POW_PRECISION,\n      FORMAT: FORMAT,\n      ALPHABET: ALPHABET\n    };\n  };\n\n\n  /*\n   * Return true if v is a BigNumber instance, otherwise return false.\n   *\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\n   *\n   * v {any}\n   *\n   * '[BigNumber Error] Invalid BigNumber: {v}'\n   */\n  BigNumber.isBigNumber = function (v) {\n    if (!v || v._isBigNumber !== true) return false;\n    if (!BigNumber.DEBUG) return true;\n\n    var i, n,\n      c = v.c,\n      e = v.e,\n      s = v.s;\n\n    out: if ({}.toString.call(c) == '[object Array]') {\n\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n\n        // If the first element is zero, the BigNumber value must be zero.\n        if (c[0] === 0) {\n          if (e === 0 && c.length === 1) return true;\n          break out;\n        }\n\n        // Calculate number of digits that c[0] should have, based on the exponent.\n        i = (e + 1) % LOG_BASE;\n        if (i < 1) i += LOG_BASE;\n\n        // Calculate number of digits of c[0].\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n        if (String(c[0]).length == i) {\n\n          for (i = 0; i < c.length; i++) {\n            n = c[i];\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n          }\n\n          // Last element cannot be zero, unless it is the only element.\n          if (n !== 0) return true;\n        }\n      }\n\n    // Infinity/NaN\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n      return true;\n    }\n\n    throw Error\n      (bignumberError + 'Invalid BigNumber: ' + v);\n  };\n\n\n  /*\n   * Return a new BigNumber whose value is the maximum of the arguments.\n   *\n   * arguments {number|string|BigNumber}\n   */\n  BigNumber.maximum = BigNumber.max = function () {\n    return maxOrMin(arguments, P.lt);\n  };\n\n\n  /*\n   * Return a new BigNumber whose value is the minimum of the arguments.\n   *\n   * arguments {number|string|BigNumber}\n   */\n  BigNumber.minimum = BigNumber.min = function () {\n    return maxOrMin(arguments, P.gt);\n  };\n\n\n  /*\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n   * zeros are produced).\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n   * '[BigNumber Error] crypto unavailable'\n   */\n  BigNumber.random = (function () {\n    var pow2_53 = 0x20000000000000;\n\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n    // Check if Math.random() produces more than 32 bits of randomness.\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n     ? function () { return mathfloor(Math.random() * pow2_53); }\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n       (Math.random() * 0x800000 | 0); };\n\n    return function (dp) {\n      var a, b, e, k, v,\n        i = 0,\n        c = [],\n        rand = new BigNumber(ONE);\n\n      if (dp == null) dp = DECIMAL_PLACES;\n      else intCheck(dp, 0, MAX);\n\n      k = mathceil(dp / LOG_BASE);\n\n      if (CRYPTO) {\n\n        // Browsers supporting crypto.getRandomValues.\n        if (crypto.getRandomValues) {\n\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n          for (; i < k;) {\n\n            // 53 bits:\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n            //                                     11111 11111111 11111111\n            // 0x20000 is 2^21.\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n            // Rejection sampling:\n            // 0 <= v < 9007199254740992\n            // Probability that v >= 9e15, is\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n            if (v >= 9e15) {\n              b = crypto.getRandomValues(new Uint32Array(2));\n              a[i] = b[0];\n              a[i + 1] = b[1];\n            } else {\n\n              // 0 <= v <= 8999999999999999\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 2;\n            }\n          }\n          i = k / 2;\n\n        // Node.js supporting crypto.randomBytes.\n        } else if (crypto.randomBytes) {\n\n          // buffer\n          a = crypto.randomBytes(k *= 7);\n\n          for (; i < k;) {\n\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n            // 0 <= v < 9007199254740992\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n            if (v >= 9e15) {\n              crypto.randomBytes(7).copy(a, i);\n            } else {\n\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 7;\n            }\n          }\n          i = k / 7;\n        } else {\n          CRYPTO = false;\n          throw Error\n           (bignumberError + 'crypto unavailable');\n        }\n      }\n\n      // Use Math.random.\n      if (!CRYPTO) {\n\n        for (; i < k;) {\n          v = random53bitInt();\n          if (v < 9e15) c[i++] = v % 1e14;\n        }\n      }\n\n      k = c[--i];\n      dp %= LOG_BASE;\n\n      // Convert trailing digits to zeros according to dp.\n      if (k && dp) {\n        v = POWS_TEN[LOG_BASE - dp];\n        c[i] = mathfloor(k / v) * v;\n      }\n\n      // Remove trailing elements which are zero.\n      for (; c[i] === 0; c.pop(), i--);\n\n      // Zero?\n      if (i < 0) {\n        c = [e = 0];\n      } else {\n\n        // Remove leading elements which are zero and adjust exponent accordingly.\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n        // Count the digits of the first element of c to determine leading zeros, and...\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n        // adjust the exponent accordingly.\n        if (i < LOG_BASE) e -= LOG_BASE - i;\n      }\n\n      rand.e = e;\n      rand.c = c;\n      return rand;\n    };\n  })();\n\n\n   /*\n   * Return a BigNumber whose value is the sum of the arguments.\n   *\n   * arguments {number|string|BigNumber}\n   */\n  BigNumber.sum = function () {\n    var i = 1,\n      args = arguments,\n      sum = new BigNumber(args[0]);\n    for (; i < args.length;) sum = sum.plus(args[i++]);\n    return sum;\n  };\n\n\n  // PRIVATE FUNCTIONS\n\n\n  // Called by BigNumber and BigNumber.prototype.toString.\n  convertBase = (function () {\n    var decimal = '0123456789';\n\n    /*\n     * Convert string of baseIn to an array of numbers of baseOut.\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n     */\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\n      var j,\n        arr = [0],\n        arrL,\n        i = 0,\n        len = str.length;\n\n      for (; i < len;) {\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n        arr[0] += alphabet.indexOf(str.charAt(i++));\n\n        for (j = 0; j < arr.length; j++) {\n\n          if (arr[j] > baseOut - 1) {\n            if (arr[j + 1] == null) arr[j + 1] = 0;\n            arr[j + 1] += arr[j] / baseOut | 0;\n            arr[j] %= baseOut;\n          }\n        }\n      }\n\n      return arr.reverse();\n    }\n\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\n    // If the caller is toString, we are converting from base 10 to baseOut.\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\n      var alphabet, d, e, k, r, x, xc, y,\n        i = str.indexOf('.'),\n        dp = DECIMAL_PLACES,\n        rm = ROUNDING_MODE;\n\n      // Non-integer.\n      if (i >= 0) {\n        k = POW_PRECISION;\n\n        // Unlimited precision.\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k;\n\n        // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n         10, baseOut, decimal);\n        y.e = y.c.length;\n      }\n\n      // Convert the number as integer.\n\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n       ? (alphabet = ALPHABET, decimal)\n       : (alphabet = decimal, ALPHABET));\n\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\n      e = k = xc.length;\n\n      // Remove trailing zeros.\n      for (; xc[--k] == 0; xc.pop());\n\n      // Zero?\n      if (!xc[0]) return alphabet.charAt(0);\n\n      // Does str represent an integer? If so, no need for the division.\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e;\n\n        // The sign is needed for correct rounding.\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      }\n\n      // xc now represents str converted to baseOut.\n\n      // THe index of the rounding digit.\n      d = e + dp + 1;\n\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\n      i = xc[d];\n\n      // Look at the rounding digits and mode to determine whether to round up.\n\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n             rm == (x.s < 0 ? 8 : 7));\n\n      // If the index of the rounding digit is not greater than zero, or xc represents\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\n      // such as 0.00001.\n      if (d < 1 || !xc[0]) {\n\n        // 1^-dp or 0\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n      } else {\n\n        // Truncate xc to the required number of decimal places.\n        xc.length = d;\n\n        // Round up?\n        if (r) {\n\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n\n            if (!d) {\n              ++e;\n              xc = [1].concat(xc);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (k = xc.length; !xc[--k];);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n        // Add leading zeros, decimal point and trailing zeros as required.\n        str = toFixedPoint(str, e, alphabet.charAt(0));\n      }\n\n      // The caller will add the sign.\n      return str;\n    };\n  })();\n\n\n  // Perform division in the specified base. Called by div and convertBase.\n  div = (function () {\n\n    // Assume non-zero x and k.\n    function multiply(x, k, base) {\n      var m, temp, xlo, xhi,\n        carry = 0,\n        i = x.length,\n        klo = k % SQRT_BASE,\n        khi = k / SQRT_BASE | 0;\n\n      for (x = x.slice(); i--;) {\n        xlo = x[i] % SQRT_BASE;\n        xhi = x[i] / SQRT_BASE | 0;\n        m = khi * xlo + xhi * klo;\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n        x[i] = temp % base;\n      }\n\n      if (carry) x = [carry].concat(x);\n\n      return x;\n    }\n\n    function compare(a, b, aL, bL) {\n      var i, cmp;\n\n      if (aL != bL) {\n        cmp = aL > bL ? 1 : -1;\n      } else {\n\n        for (i = cmp = 0; i < aL; i++) {\n\n          if (a[i] != b[i]) {\n            cmp = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      return cmp;\n    }\n\n    function subtract(a, b, aL, base) {\n      var i = 0;\n\n      // Subtract b from a.\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      }\n\n      // Remove leading zeros.\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\n    }\n\n    // x: dividend, y: divisor.\n    return function (x, y, dp, rm, base) {\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n        yL, yz,\n        s = x.s == y.s ? 1 : -1,\n        xc = x.c,\n        yc = y.c;\n\n      // Either NaN, Infinity or 0?\n      if (!xc || !xc[0] || !yc || !yc[0]) {\n\n        return new BigNumber(\n\n         // Return NaN if either NaN, or both Infinity or 0.\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n       );\n      }\n\n      q = new BigNumber(s);\n      qc = q.c = [];\n      e = x.e - y.e;\n      s = dp + e + 1;\n\n      if (!base) {\n        base = BASE;\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n        s = s / LOG_BASE | 0;\n      }\n\n      // Result exponent may be one less then the current value of e.\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n      if (yc[i] > (xc[i] || 0)) e--;\n\n      if (s < 0) {\n        qc.push(1);\n        more = true;\n      } else {\n        xL = xc.length;\n        yL = yc.length;\n        i = 0;\n        s += 2;\n\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n        n = mathfloor(base / (yc[0] + 1));\n\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n        if (n > 1) {\n          yc = multiply(yc, n, base);\n          xc = multiply(xc, n, base);\n          yL = yc.length;\n          xL = xc.length;\n        }\n\n        xi = yL;\n        rem = xc.slice(0, yL);\n        remL = rem.length;\n\n        // Add zeros to make remainder as long as divisor.\n        for (; remL < yL; rem[remL++] = 0);\n        yz = yc.slice();\n        yz = [0].concat(yz);\n        yc0 = yc[0];\n        if (yc[1] >= base / 2) yc0++;\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n        do {\n          n = 0;\n\n          // Compare divisor and remainder.\n          cmp = compare(yc, rem, yL, remL);\n\n          // If divisor < remainder.\n          if (cmp < 0) {\n\n            // Calculate trial digit, n.\n\n            rem0 = rem[0];\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n            // n is how many times the divisor goes into the current remainder.\n            n = mathfloor(rem0 / yc0);\n\n            //  Algorithm:\n            //  product = divisor multiplied by trial digit (n).\n            //  Compare product and remainder.\n            //  If product is greater than remainder:\n            //    Subtract divisor from product, decrement trial digit.\n            //  Subtract product from remainder.\n            //  If product was less than remainder at the last compare:\n            //    Compare new remainder and divisor.\n            //    If remainder is greater than divisor:\n            //      Subtract divisor from remainder, increment trial digit.\n\n            if (n > 1) {\n\n              // n may be > base only when base is 3.\n              if (n >= base) n = base - 1;\n\n              // product = divisor * trial digit.\n              prod = multiply(yc, n, base);\n              prodL = prod.length;\n              remL = rem.length;\n\n              // Compare product and remainder.\n              // If product > remainder then trial digit n too high.\n              // n is 1 too high about 5% of the time, and is not known to have\n              // ever been more than 1 too high.\n              while (compare(prod, rem, prodL, remL) == 1) {\n                n--;\n\n                // Subtract divisor from product.\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                prodL = prod.length;\n                cmp = 1;\n              }\n            } else {\n\n              // n is 0 or 1, cmp is -1.\n              // If n is 0, there is no need to compare yc and rem again below,\n              // so change cmp to 1 to avoid it.\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\n              if (n == 0) {\n\n                // divisor < remainder, so n must be at least 1.\n                cmp = n = 1;\n              }\n\n              // product = divisor\n              prod = yc.slice();\n              prodL = prod.length;\n            }\n\n            if (prodL < remL) prod = [0].concat(prod);\n\n            // Subtract product from remainder.\n            subtract(rem, prod, remL, base);\n            remL = rem.length;\n\n             // If product was < remainder.\n            if (cmp == -1) {\n\n              // Compare divisor and new remainder.\n              // If divisor < new remainder, subtract divisor from remainder.\n              // Trial digit n too low.\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\n              while (compare(yc, rem, yL, remL) < 1) {\n                n++;\n\n                // Subtract divisor from remainder.\n                subtract(rem, yL < remL ? yz : yc, remL, base);\n                remL = rem.length;\n              }\n            }\n          } else if (cmp === 0) {\n            n++;\n            rem = [0];\n          } // else cmp === 1 and n will be 0\n\n          // Add the next digit, n, to the result array.\n          qc[i++] = n;\n\n          // Update the remainder.\n          if (rem[0]) {\n            rem[remL++] = xc[xi] || 0;\n          } else {\n            rem = [xc[xi]];\n            remL = 1;\n          }\n        } while ((xi++ < xL || rem[0] != null) && s--);\n\n        more = rem[0] != null;\n\n        // Leading zero?\n        if (!qc[0]) qc.splice(0, 1);\n      }\n\n      if (base == BASE) {\n\n        // To calculate q.e, first get the number of digits of qc[0].\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n      // Caller is convertBase.\n      } else {\n        q.e = e;\n        q.r = +more;\n      }\n\n      return q;\n    };\n  })();\n\n\n  /*\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\n   * notation rounded to the specified decimal places or significant digits.\n   *\n   * n: a BigNumber.\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\n   * rm: the rounding mode.\n   * id: 1 (toExponential) or 2 (toPrecision).\n   */\n  function format(n, i, rm, id) {\n    var c0, e, ne, len, str;\n\n    if (rm == null) rm = ROUNDING_MODE;\n    else intCheck(rm, 0, 8);\n\n    if (!n.c) return n.toString();\n\n    c0 = n.c[0];\n    ne = n.e;\n\n    if (i == null) {\n      str = coeffToString(n.c);\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\n       ? toExponential(str, ne)\n       : toFixedPoint(str, ne, '0');\n    } else {\n      n = round(new BigNumber(n), i, rm);\n\n      // n.e may have changed if the value was rounded up.\n      e = n.e;\n\n      str = coeffToString(n.c);\n      len = str.length;\n\n      // toPrecision returns exponential notation if the number of significant digits\n      // specified is less than the number of digits necessary to represent the integer\n      // part of the value in fixed-point notation.\n\n      // Exponential notation.\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n        // Append zeros?\n        for (; len < i; str += '0', len++);\n        str = toExponential(str, e);\n\n      // Fixed-point notation.\n      } else {\n        i -= ne;\n        str = toFixedPoint(str, e, '0');\n\n        // Append zeros?\n        if (e + 1 > len) {\n          if (--i > 0) for (str += '.'; i--; str += '0');\n        } else {\n          i += e - len;\n          if (i > 0) {\n            if (e + 1 == len) str += '.';\n            for (; i--; str += '0');\n          }\n        }\n      }\n    }\n\n    return n.s < 0 && c0 ? '-' + str : str;\n  }\n\n\n  // Handle BigNumber.max and BigNumber.min.\n  function maxOrMin(args, method) {\n    var n,\n      i = 1,\n      m = new BigNumber(args[0]);\n\n    for (; i < args.length; i++) {\n      n = new BigNumber(args[i]);\n\n      // If any number is NaN, return NaN.\n      if (!n.s) {\n        m = n;\n        break;\n      } else if (method.call(m, n)) {\n        m = n;\n      }\n    }\n\n    return m;\n  }\n\n\n  /*\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n   * Called by minus, plus and times.\n   */\n  function normalise(n, c, e) {\n    var i = 1,\n      j = c.length;\n\n     // Remove trailing zeros.\n    for (; !c[--j]; c.pop());\n\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\n    for (j = c[0]; j >= 10; j /= 10, i++);\n\n    // Overflow?\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n      // Infinity.\n      n.c = n.e = null;\n\n    // Underflow?\n    } else if (e < MIN_EXP) {\n\n      // Zero.\n      n.c = [n.e = 0];\n    } else {\n      n.e = e;\n      n.c = c;\n    }\n\n    return n;\n  }\n\n\n  // Handle values that fail the validity test in BigNumber.\n  parseNumeric = (function () {\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n      dotAfter = /^([^.]+)\\.$/,\n      dotBefore = /^\\.([^.]+)$/,\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n    return function (x, str, isNum, b) {\n      var base,\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n      // No exception on ±Infinity or NaN.\n      if (isInfinityOrNaN.test(s)) {\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n      } else {\n        if (!isNum) {\n\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n          s = s.replace(basePrefix, function (m, p1, p2) {\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n            return !b || b == base ? p1 : m;\n          });\n\n          if (b) {\n            base = b;\n\n            // E.g. '1.' to '1', '.1' to '0.1'\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n          }\n\n          if (str != s) return new BigNumber(s, base);\n        }\n\n        // '[BigNumber Error] Not a number: {n}'\n        // '[BigNumber Error] Not a base {b} number: {n}'\n        if (BigNumber.DEBUG) {\n          throw Error\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n        }\n\n        // NaN\n        x.s = null;\n      }\n\n      x.c = x.e = null;\n    }\n  })();\n\n\n  /*\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n   * If r is truthy, it is known that there are more digits after the rounding digit.\n   */\n  function round(x, sd, rm, r) {\n    var d, i, j, k, n, ni, rd,\n      xc = x.c,\n      pows10 = POWS_TEN;\n\n    // if x is not Infinity or NaN...\n    if (xc) {\n\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\n      // ni is the index of n within x.c.\n      // d is the number of digits of n.\n      // i is the index of rd within n including leading zeros.\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\n      out: {\n\n        // Get the number of digits of the first element of xc.\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n        i = sd - d;\n\n        // If the rounding digit is in the first element of xc...\n        if (i < 0) {\n          i += LOG_BASE;\n          j = sd;\n          n = xc[ni = 0];\n\n          // Get the rounding digit at index j of n.\n          rd = n / pows10[d - j - 1] % 10 | 0;\n        } else {\n          ni = mathceil((i + 1) / LOG_BASE);\n\n          if (ni >= xc.length) {\n\n            if (r) {\n\n              // Needed by sqrt.\n              for (; xc.length <= ni; xc.push(0));\n              n = rd = 0;\n              d = 1;\n              i %= LOG_BASE;\n              j = i - LOG_BASE + 1;\n            } else {\n              break out;\n            }\n          } else {\n            n = k = xc[ni];\n\n            // Get the number of digits of n.\n            for (d = 1; k >= 10; k /= 10, d++);\n\n            // Get the index of rd within n.\n            i %= LOG_BASE;\n\n            // Get the index of rd within n, adjusted for leading zeros.\n            // The number of leading zeros of n is given by LOG_BASE - d.\n            j = i - LOG_BASE + d;\n\n            // Get the rounding digit at index j of n.\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n          }\n        }\n\n        r = r || sd < 0 ||\n\n        // Are there any non-zero digits after the rounding digit?\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n        r = rm < 4\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n          // Check whether the digit to the left of the rounding digit is odd.\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n           rm == (x.s < 0 ? 8 : 7));\n\n        if (sd < 1 || !xc[0]) {\n          xc.length = 0;\n\n          if (r) {\n\n            // Convert sd to decimal places.\n            sd -= x.e + 1;\n\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n            x.e = -sd || 0;\n          } else {\n\n            // Zero.\n            xc[0] = x.e = 0;\n          }\n\n          return x;\n        }\n\n        // Remove excess digits.\n        if (i == 0) {\n          xc.length = ni;\n          k = 1;\n          ni--;\n        } else {\n          xc.length = ni + 1;\n          k = pows10[LOG_BASE - i];\n\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n          // j > 0 means i > number of leading zeros of n.\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n        }\n\n        // Round up?\n        if (r) {\n\n          for (; ;) {\n\n            // If the digit to be rounded up is in the first element of xc...\n            if (ni == 0) {\n\n              // i will be the length of xc[0] before k is added.\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n              j = xc[0] += k;\n              for (k = 1; j >= 10; j /= 10, k++);\n\n              // if i != k the length has increased.\n              if (i != k) {\n                x.e++;\n                if (xc[0] == BASE) xc[0] = 1;\n              }\n\n              break;\n            } else {\n              xc[ni] += k;\n              if (xc[ni] != BASE) break;\n              xc[ni--] = 0;\n              k = 1;\n            }\n          }\n        }\n\n        // Remove trailing zeros.\n        for (i = xc.length; xc[--i] === 0; xc.pop());\n      }\n\n      // Overflow? Infinity.\n      if (x.e > MAX_EXP) {\n        x.c = x.e = null;\n\n      // Underflow? Zero.\n      } else if (x.e < MIN_EXP) {\n        x.c = [x.e = 0];\n      }\n    }\n\n    return x;\n  }\n\n\n  function valueOf(n) {\n    var str,\n      e = n.e;\n\n    if (e === null) return n.toString();\n\n    str = coeffToString(n.c);\n\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n      ? toExponential(str, e)\n      : toFixedPoint(str, e, '0');\n\n    return n.s < 0 ? '-' + str : str;\n  }\n\n\n  // PROTOTYPE/INSTANCE METHODS\n\n\n  /*\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\n   */\n  P.absoluteValue = P.abs = function () {\n    var x = new BigNumber(this);\n    if (x.s < 0) x.s = 1;\n    return x;\n  };\n\n\n  /*\n   * Return\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n   *   0 if they have the same value,\n   *   or null if the value of either is NaN.\n   */\n  P.comparedTo = function (y, b) {\n    return compare(this, new BigNumber(y, b));\n  };\n\n\n  /*\n   * If dp is undefined or null or true or false, return the number of decimal places of the\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n   *\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n   * ROUNDING_MODE if rm is omitted.\n   *\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n   */\n  P.decimalPlaces = P.dp = function (dp, rm) {\n    var c, n, v,\n      x = this;\n\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      if (rm == null) rm = ROUNDING_MODE;\n      else intCheck(rm, 0, 8);\n\n      return round(new BigNumber(x), dp + x.e + 1, rm);\n    }\n\n    if (!(c = x.c)) return null;\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n    // Subtract the number of trailing zeros of the last number.\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n    if (n < 0) n = 0;\n\n    return n;\n  };\n\n\n  /*\n   *  n / 0 = I\n   *  n / N = N\n   *  n / I = 0\n   *  0 / n = 0\n   *  0 / 0 = N\n   *  0 / N = N\n   *  0 / I = 0\n   *  N / n = N\n   *  N / 0 = N\n   *  N / N = N\n   *  N / I = N\n   *  I / n = I\n   *  I / 0 = I\n   *  I / N = N\n   *  I / I = N\n   *\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n   */\n  P.dividedBy = P.div = function (y, b) {\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n  };\n\n\n  /*\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\n   * BigNumber by the value of BigNumber(y, b).\n   */\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\n    return div(this, new BigNumber(y, b), 0, 1);\n  };\n\n\n  /*\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n   *\n   * If m is present, return the result modulo m.\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n   *\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n   *\n   * n {number|string|BigNumber} The exponent. An integer.\n   * [m] {number|string|BigNumber} The modulus.\n   *\n   * '[BigNumber Error] Exponent not an integer: {n}'\n   */\n  P.exponentiatedBy = P.pow = function (n, m) {\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\n      x = this;\n\n    n = new BigNumber(n);\n\n    // Allow NaN and ±Infinity, but not other non-integers.\n    if (n.c && !n.isInteger()) {\n      throw Error\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\n    }\n\n    if (m != null) m = new BigNumber(m);\n\n    // Exponent of MAX_SAFE_INTEGER is 15.\n    nIsBig = n.e > 14;\n\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n      // The sign of the result of pow when x is negative depends on the evenness of n.\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n      return m ? y.mod(m) : y;\n    }\n\n    nIsNeg = n.s < 0;\n\n    if (m) {\n\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n      if (isModExp) x = x.mod(m);\n\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n      // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n      // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n      // If x is negative and n is odd, k = -0, else k = 0.\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n      // If x >= 1, k = ±Infinity.\n      if (x.e > -1) k = 1 / k;\n\n      // If n is negative return ±0, else return ±Infinity.\n      return new BigNumber(nIsNeg ? 1 / k : k);\n\n    } else if (POW_PRECISION) {\n\n      // Truncating each coefficient array to a length of k after each multiplication\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\n      // i.e. there will be a minimum of 28 guard digits retained.\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\n    }\n\n    if (nIsBig) {\n      half = new BigNumber(0.5);\n      if (nIsNeg) n.s = 1;\n      nIsOdd = isOdd(n);\n    } else {\n      i = Math.abs(+valueOf(n));\n      nIsOdd = i % 2;\n    }\n\n    y = new BigNumber(ONE);\n\n    // Performs 54 loop iterations for n of 9007199254740991.\n    for (; ;) {\n\n      if (nIsOdd) {\n        y = y.times(x);\n        if (!y.c) break;\n\n        if (k) {\n          if (y.c.length > k) y.c.length = k;\n        } else if (isModExp) {\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (i) {\n        i = mathfloor(i / 2);\n        if (i === 0) break;\n        nIsOdd = i % 2;\n      } else {\n        n = n.times(half);\n        round(n, n.e + 1, 1);\n\n        if (n.e > 14) {\n          nIsOdd = isOdd(n);\n        } else {\n          i = +valueOf(n);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        }\n      }\n\n      x = x.times(x);\n\n      if (k) {\n        if (x.c && x.c.length > k) x.c.length = k;\n      } else if (isModExp) {\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n      }\n    }\n\n    if (isModExp) return y;\n    if (nIsNeg) y = ONE.div(y);\n\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n  };\n\n\n  /*\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n   *\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n   */\n  P.integerValue = function (rm) {\n    var n = new BigNumber(this);\n    if (rm == null) rm = ROUNDING_MODE;\n    else intCheck(rm, 0, 8);\n    return round(n, n.e + 1, rm);\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n   * otherwise return false.\n   */\n  P.isEqualTo = P.eq = function (y, b) {\n    return compare(this, new BigNumber(y, b)) === 0;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\n   */\n  P.isFinite = function () {\n    return !!this.c;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n   * otherwise return false.\n   */\n  P.isGreaterThan = P.gt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) > 0;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is greater than or equal to the value of\n   * BigNumber(y, b), otherwise return false.\n   */\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\n   */\n  P.isInteger = function () {\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n   * otherwise return false.\n   */\n  P.isLessThan = P.lt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) < 0;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is less than or equal to the value of\n   * BigNumber(y, b), otherwise return false.\n   */\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\n   */\n  P.isNaN = function () {\n    return !this.s;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is negative, otherwise return false.\n   */\n  P.isNegative = function () {\n    return this.s < 0;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is positive, otherwise return false.\n   */\n  P.isPositive = function () {\n    return this.s > 0;\n  };\n\n\n  /*\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n   */\n  P.isZero = function () {\n    return !!this.c && this.c[0] == 0;\n  };\n\n\n  /*\n   *  n - 0 = n\n   *  n - N = N\n   *  n - I = -I\n   *  0 - n = -n\n   *  0 - 0 = 0\n   *  0 - N = N\n   *  0 - I = -I\n   *  N - n = N\n   *  N - 0 = N\n   *  N - N = N\n   *  N - I = N\n   *  I - n = I\n   *  I - 0 = I\n   *  I - N = N\n   *  I - I = N\n   *\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n   * BigNumber(y, b).\n   */\n  P.minus = function (y, b) {\n    var i, j, t, xLTy,\n      x = this,\n      a = x.s;\n\n    y = new BigNumber(y, b);\n    b = y.s;\n\n    // Either NaN?\n    if (!a || !b) return new BigNumber(NaN);\n\n    // Signs differ?\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xe = x.e / LOG_BASE,\n      ye = y.e / LOG_BASE,\n      xc = x.c,\n      yc = y.c;\n\n    if (!xe || !ye) {\n\n      // Either Infinity?\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n      // Either zero?\n      if (!xc[0] || !yc[0]) {\n\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n         ROUNDING_MODE == 3 ? -0 : 0);\n      }\n    }\n\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice();\n\n    // Determine which is the bigger number.\n    if (a = xe - ye) {\n\n      if (xLTy = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse();\n\n      // Prepend zeros to equalise exponents.\n      for (b = a; b--; t.push(0));\n      t.reverse();\n    } else {\n\n      // Exponents equal. Check digit by digit.\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n      for (a = b = 0; b < j; b++) {\n\n        if (xc[b] != yc[b]) {\n          xLTy = xc[b] < yc[b];\n          break;\n        }\n      }\n    }\n\n    // x < y? Point xc to the array of the bigger number.\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n    b = (j = yc.length) - (i = xc.length);\n\n    // Append zeros to xc if shorter.\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n    if (b > 0) for (; b--; xc[i++] = 0);\n    b = BASE - 1;\n\n    // Subtract yc from xc.\n    for (; j > a;) {\n\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i]; xc[i] = b);\n        --xc[i];\n        xc[j] += BASE;\n      }\n\n      xc[j] -= yc[j];\n    }\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n    // Zero?\n    if (!xc[0]) {\n\n      // Following IEEE 754 (2008) 6.3,\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\n      y.c = [y.e = 0];\n      return y;\n    }\n\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n    // for finite x and y.\n    return normalise(y, xc, ye);\n  };\n\n\n  /*\n   *   n % 0 =  N\n   *   n % N =  N\n   *   n % I =  n\n   *   0 % n =  0\n   *  -0 % n = -0\n   *   0 % 0 =  N\n   *   0 % N =  N\n   *   0 % I =  0\n   *   N % n =  N\n   *   N % 0 =  N\n   *   N % N =  N\n   *   N % I =  N\n   *   I % n =  N\n   *   I % 0 =  N\n   *   I % N =  N\n   *   I % I =  N\n   *\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n   */\n  P.modulo = P.mod = function (y, b) {\n    var q, s,\n      x = this;\n\n    y = new BigNumber(y, b);\n\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n    if (!x.c || !y.s || y.c && !y.c[0]) {\n      return new BigNumber(NaN);\n\n    // Return x if y is Infinity or x is zero.\n    } else if (!y.c || x.c && !x.c[0]) {\n      return new BigNumber(x);\n    }\n\n    if (MODULO_MODE == 9) {\n\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // r = x - qy    where  0 <= r < abs(y)\n      s = y.s;\n      y.s = 1;\n      q = div(x, y, 0, 3);\n      y.s = s;\n      q.s *= s;\n    } else {\n      q = div(x, y, 0, MODULO_MODE);\n    }\n\n    y = x.minus(q.times(y));\n\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n    return y;\n  };\n\n\n  /*\n   *  n * 0 = 0\n   *  n * N = N\n   *  n * I = I\n   *  0 * n = 0\n   *  0 * 0 = 0\n   *  0 * N = N\n   *  0 * I = N\n   *  N * n = N\n   *  N * 0 = N\n   *  N * N = N\n   *  N * I = N\n   *  I * n = I\n   *  I * 0 = N\n   *  I * N = N\n   *  I * I = I\n   *\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n   * of BigNumber(y, b).\n   */\n  P.multipliedBy = P.times = function (y, b) {\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n      base, sqrtBase,\n      x = this,\n      xc = x.c,\n      yc = (y = new BigNumber(y, b)).c;\n\n    // Either NaN, ±Infinity or ±0?\n    if (!xc || !yc || !xc[0] || !yc[0]) {\n\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n        y.c = y.e = y.s = null;\n      } else {\n        y.s *= x.s;\n\n        // Return ±Infinity if either is ±Infinity.\n        if (!xc || !yc) {\n          y.c = y.e = null;\n\n        // Return ±0 if either is ±0.\n        } else {\n          y.c = [0];\n          y.e = 0;\n        }\n      }\n\n      return y;\n    }\n\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n    y.s *= x.s;\n    xcL = xc.length;\n    ycL = yc.length;\n\n    // Ensure xc points to longer array and xcL to its length.\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n    // Initialise the result array with zeros.\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n    base = BASE;\n    sqrtBase = SQRT_BASE;\n\n    for (i = ycL; --i >= 0;) {\n      c = 0;\n      ylo = yc[i] % sqrtBase;\n      yhi = yc[i] / sqrtBase | 0;\n\n      for (k = xcL, j = i + k; j > i;) {\n        xlo = xc[--k] % sqrtBase;\n        xhi = xc[k] / sqrtBase | 0;\n        m = yhi * xlo + xhi * ylo;\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n        zc[j--] = xlo % base;\n      }\n\n      zc[j] = c;\n    }\n\n    if (c) {\n      ++e;\n    } else {\n      zc.splice(0, 1);\n    }\n\n    return normalise(y, zc, e);\n  };\n\n\n  /*\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\n   * i.e. multiplied by -1.\n   */\n  P.negated = function () {\n    var x = new BigNumber(this);\n    x.s = -x.s || null;\n    return x;\n  };\n\n\n  /*\n   *  n + 0 = n\n   *  n + N = N\n   *  n + I = I\n   *  0 + n = n\n   *  0 + 0 = 0\n   *  0 + N = N\n   *  0 + I = I\n   *  N + n = N\n   *  N + 0 = N\n   *  N + N = N\n   *  N + I = N\n   *  I + n = I\n   *  I + 0 = I\n   *  I + N = N\n   *  I + I = I\n   *\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n   * BigNumber(y, b).\n   */\n  P.plus = function (y, b) {\n    var t,\n      x = this,\n      a = x.s;\n\n    y = new BigNumber(y, b);\n    b = y.s;\n\n    // Either NaN?\n    if (!a || !b) return new BigNumber(NaN);\n\n    // Signs differ?\n     if (a != b) {\n      y.s = -b;\n      return x.minus(y);\n    }\n\n    var xe = x.e / LOG_BASE,\n      ye = y.e / LOG_BASE,\n      xc = x.c,\n      yc = y.c;\n\n    if (!xe || !ye) {\n\n      // Return ±Infinity if either ±Infinity.\n      if (!xc || !yc) return new BigNumber(a / 0);\n\n      // Either zero?\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n    }\n\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice();\n\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n    if (a = xe - ye) {\n      if (a > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        a = -a;\n        t = xc;\n      }\n\n      t.reverse();\n      for (; a--; t.push(0));\n      t.reverse();\n    }\n\n    a = xc.length;\n    b = yc.length;\n\n    // Point xc to the longer array, and b to the shorter length.\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n    for (a = 0; b;) {\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n    }\n\n    if (a) {\n      xc = [a].concat(xc);\n      ++ye;\n    }\n\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    // ye = MAX_EXP + 1 possible\n    return normalise(y, xc, ye);\n  };\n\n\n  /*\n   * If sd is undefined or null or true or false, return the number of significant digits of\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n   * If sd is true include integer-part trailing zeros in the count.\n   *\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n   * ROUNDING_MODE if rm is omitted.\n   *\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n   */\n  P.precision = P.sd = function (sd, rm) {\n    var c, n, v,\n      x = this;\n\n    if (sd != null && sd !== !!sd) {\n      intCheck(sd, 1, MAX);\n      if (rm == null) rm = ROUNDING_MODE;\n      else intCheck(rm, 0, 8);\n\n      return round(new BigNumber(x), sd, rm);\n    }\n\n    if (!(c = x.c)) return null;\n    v = c.length - 1;\n    n = v * LOG_BASE + 1;\n\n    if (v = c[v]) {\n\n      // Subtract the number of trailing zeros of the last element.\n      for (; v % 10 == 0; v /= 10, n--);\n\n      // Add the number of digits of the first element.\n      for (v = c[0]; v >= 10; v /= 10, n++);\n    }\n\n    if (sd && x.e + 1 > n) n = x.e + 1;\n\n    return n;\n  };\n\n\n  /*\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n   *\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n   */\n  P.shiftedBy = function (k) {\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n    return this.times('1e' + k);\n  };\n\n\n  /*\n   *  sqrt(-n) =  N\n   *  sqrt(N) =  N\n   *  sqrt(-I) =  N\n   *  sqrt(I) =  I\n   *  sqrt(0) =  0\n   *  sqrt(-0) = -0\n   *\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n   */\n  P.squareRoot = P.sqrt = function () {\n    var m, n, r, rep, t,\n      x = this,\n      c = x.c,\n      s = x.s,\n      e = x.e,\n      dp = DECIMAL_PLACES + 4,\n      half = new BigNumber('0.5');\n\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !c || !c[0]) {\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n    }\n\n    // Initial estimate.\n    s = Math.sqrt(+valueOf(x));\n\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n      n = coeffToString(c);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(+n);\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new BigNumber(n);\n    } else {\n      r = new BigNumber(s + '');\n    }\n\n    // Check for zero.\n    // r could be zero if MIN_EXP is changed after the this value was created.\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n    // coeffToString to throw.\n    if (r.c[0]) {\n      e = r.e;\n      s = e + dp;\n      if (s < 3) s = 0;\n\n      // Newton-Raphson iteration.\n      for (; ;) {\n        t = r;\n        r = half.times(t.plus(div(x, t, dp, 1)));\n\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n\n          // The exponent of r may here be one less than the final result exponent,\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n          // are indexed correctly.\n          if (r.e < e) --s;\n          n = n.slice(s - 3, s + 1);\n\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n          // iteration.\n          if (n == '9999' || !rep && n == '4999') {\n\n            // On the first iteration only, check to see if rounding up gives the\n            // exact result as the nines may infinitely repeat.\n            if (!rep) {\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n              if (t.times(t).eq(x)) {\n                r = t;\n                break;\n              }\n            }\n\n            dp += 4;\n            s += 4;\n            rep = 1;\n          } else {\n\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n            // result. If not, then there are further digits and m will be truthy.\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n              // Truncate to the first rounding digit.\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\n              m = !r.times(r).eq(x);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n  };\n\n\n  /*\n   * Return a string representing the value of this BigNumber in exponential notation and\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n   */\n  P.toExponential = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp++;\n    }\n    return format(this, dp, rm, 1);\n  };\n\n\n  /*\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n   *\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n   */\n  P.toFixed = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp = dp + this.e + 1;\n    }\n    return format(this, dp, rm);\n  };\n\n\n  /*\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n   * of the format or FORMAT object (see BigNumber.set).\n   *\n   * The formatting object may contain some or all of the properties shown below.\n   *\n   * FORMAT = {\n   *   prefix: '',\n   *   groupSize: 3,\n   *   secondaryGroupSize: 0,\n   *   groupSeparator: ',',\n   *   decimalSeparator: '.',\n   *   fractionGroupSize: 0,\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\n   *   suffix: ''\n   * };\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   * [format] {object} Formatting options. See FORMAT pbject above.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n   * '[BigNumber Error] Argument not an object: {format}'\n   */\n  P.toFormat = function (dp, rm, format) {\n    var str,\n      x = this;\n\n    if (format == null) {\n      if (dp != null && rm && typeof rm == 'object') {\n        format = rm;\n        rm = null;\n      } else if (dp && typeof dp == 'object') {\n        format = dp;\n        dp = rm = null;\n      } else {\n        format = FORMAT;\n      }\n    } else if (typeof format != 'object') {\n      throw Error\n        (bignumberError + 'Argument not an object: ' + format);\n    }\n\n    str = x.toFixed(dp, rm);\n\n    if (x.c) {\n      var i,\n        arr = str.split('.'),\n        g1 = +format.groupSize,\n        g2 = +format.secondaryGroupSize,\n        groupSeparator = format.groupSeparator || '',\n        intPart = arr[0],\n        fractionPart = arr[1],\n        isNeg = x.s < 0,\n        intDigits = isNeg ? intPart.slice(1) : intPart,\n        len = intDigits.length;\n\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n      if (g1 > 0 && len > 0) {\n        i = len % g1 || g1;\n        intPart = intDigits.substr(0, i);\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n        if (isNeg) intPart = '-' + intPart;\n      }\n\n      str = fractionPart\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n         '$&' + (format.fractionGroupSeparator || ''))\n        : fractionPart)\n       : intPart;\n    }\n\n    return (format.prefix || '') + str + (format.suffix || '');\n  };\n\n\n  /*\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\n   * fraction with an integer numerator and an integer denominator.\n   * The denominator will be a positive non-zero value less than or equal to the specified\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\n   * the lowest value necessary to represent the number exactly.\n   *\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n   *\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n   */\n  P.toFraction = function (md) {\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\n      x = this,\n      xc = x.c;\n\n    if (md != null) {\n      n = new BigNumber(md);\n\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n        throw Error\n          (bignumberError + 'Argument ' +\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n      }\n    }\n\n    if (!xc) return new BigNumber(x);\n\n    d = new BigNumber(ONE);\n    n1 = d0 = new BigNumber(ONE);\n    d1 = n0 = new BigNumber(ONE);\n    s = coeffToString(xc);\n\n    // Determine initial denominator.\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n    e = d.e = s.length - x.e - 1;\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n    exp = MAX_EXP;\n    MAX_EXP = 1 / 0;\n    n = new BigNumber(s);\n\n    // n0 = d1 = 0\n    n0.c[0] = 0;\n\n    for (; ;)  {\n      q = div(n, d, 0, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.comparedTo(md) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      n1 = n0.plus(q.times(d2 = n1));\n      n0 = d2;\n      d = n.minus(q.times(d2 = d));\n      n = d2;\n    }\n\n    d2 = div(md.minus(d0), d1, 0, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n    e = e * 2;\n\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n\n    MAX_EXP = exp;\n\n    return r;\n  };\n\n\n  /*\n   * Return the value of this BigNumber converted to a number primitive.\n   */\n  P.toNumber = function () {\n    return +valueOf(this);\n  };\n\n\n  /*\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n   * necessary to represent the integer part of the value in fixed-point notation, then use\n   * exponential notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n   */\n  P.toPrecision = function (sd, rm) {\n    if (sd != null) intCheck(sd, 1, MAX);\n    return format(this, sd, rm, 2);\n  };\n\n\n  /*\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n   * TO_EXP_NEG, return exponential notation.\n   *\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n   *\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n   */\n  P.toString = function (b) {\n    var str,\n      n = this,\n      s = n.s,\n      e = n.e;\n\n    // Infinity or NaN?\n    if (e === null) {\n      if (s) {\n        str = 'Infinity';\n        if (s < 0) str = '-' + str;\n      } else {\n        str = 'NaN';\n      }\n    } else {\n      if (b == null) {\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n         ? toExponential(coeffToString(n.c), e)\n         : toFixedPoint(coeffToString(n.c), e, '0');\n      } else if (b === 10) {\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\n      } else {\n        intCheck(b, 2, ALPHABET.length, 'Base');\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n      }\n\n      if (s < 0 && n.c[0]) str = '-' + str;\n    }\n\n    return str;\n  };\n\n\n  /*\n   * Return as toString, but do not accept a base argument, and include the minus sign for\n   * negative zero.\n   */\n  P.valueOf = P.toJSON = function () {\n    return valueOf(this);\n  };\n\n\n  P._isBigNumber = true;\n\n  P[Symbol.toStringTag] = 'BigNumber';\n\n  // Node.js v10.12.0+\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\n\n  if (configObject != null) BigNumber.set(configObject);\n\n  return BigNumber;\n}\n\n\n// PRIVATE HELPER FUNCTIONS\n\n// These functions don't need access to variables,\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\nfunction bitFloor(n) {\n  var i = n | 0;\n  return n > 0 || n === i ? i : i - 1;\n}\n\n\n// Return a coefficient array as a string of base 10 digits.\nfunction coeffToString(a) {\n  var s, z,\n    i = 1,\n    j = a.length,\n    r = a[0] + '';\n\n  for (; i < j;) {\n    s = a[i++] + '';\n    z = LOG_BASE - s.length;\n    for (; z--; s = '0' + s);\n    r += s;\n  }\n\n  // Determine trailing zeros.\n  for (j = r.length; r.charCodeAt(--j) === 48;);\n\n  return r.slice(0, j + 1 || 1);\n}\n\n\n// Compare the value of BigNumbers x and y.\nfunction compare(x, y) {\n  var a, b,\n    xc = x.c,\n    yc = y.c,\n    i = x.s,\n    j = y.s,\n    k = x.e,\n    l = y.e;\n\n  // Either NaN?\n  if (!i || !j) return null;\n\n  a = xc && !xc[0];\n  b = yc && !yc[0];\n\n  // Either zero?\n  if (a || b) return a ? b ? 0 : -j : i;\n\n  // Signs differ?\n  if (i != j) return i;\n\n  a = i < 0;\n  b = k == l;\n\n  // Either Infinity?\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n  // Compare exponents.\n  if (!b) return k > l ^ a ? 1 : -1;\n\n  j = (k = xc.length) < (l = yc.length) ? k : l;\n\n  // Compare digit by digit.\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n  // Compare lengths.\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\n}\n\n\n/*\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\n */\nfunction intCheck(n, min, max, name) {\n  if (n < min || n > max || n !== mathfloor(n)) {\n    throw Error\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n       : ' not a primitive number: ') + String(n));\n  }\n}\n\n\n// Assumes finite n.\nfunction isOdd(n) {\n  var k = n.c.length - 1;\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n}\n\n\nfunction toExponential(str, e) {\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n   (e < 0 ? 'e' : 'e+') + e;\n}\n\n\nfunction toFixedPoint(str, e, z) {\n  var len, zs;\n\n  // Negative exponent?\n  if (e < 0) {\n\n    // Prepend zeros.\n    for (zs = z + '.'; ++e; zs += z);\n    str = zs + str;\n\n  // Positive exponent\n  } else {\n    len = str.length;\n\n    // Append zeros.\n    if (++e > len) {\n      for (zs = z, e -= len; --e; zs += z);\n      str += zs;\n    } else if (e < len) {\n      str = str.slice(0, e) + '.' + str.slice(e);\n    }\n  }\n\n  return str;\n}\n\n\n// EXPORT\n\n\nexport var BigNumber = clone();\n\nexport default BigNumber;\n"],"sourceRoot":""}